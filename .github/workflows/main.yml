name: MimeKit CI/CD Pipeline

on: [push, pull_request, workflow_dispatch]

jobs:
  ci:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]
        build-configuration: [ Debug, Release ]
    outputs:
      latest-version: ${{ steps.get_semantic_version.outputs.version_num }}
    env:
      SOLUTION_PATH: MimeKit.sln
      BUILD_PLATFORM: Any CPU
      BUILD_CONFIGURATION: ${{ matrix.build-configuration }}
      GITHUB_RUN_NUMBER: ${{ github.run_number }}
    steps:
      - name: Steps' conditionals handler
        id: step_conditionals_handler
        shell: pwsh
        run: |
          $IS_CONFIGURATION_DEBUG = 'false'
          $IS_CONFIGURATION_RELEASE = 'false'
          $IS_PUSH_TO_MASTER = 'false'
          $IS_NOT_PR = 'true'
          $IS_GITHUB_RELEASE = 'false'
          $IS_WINDOWS = 'false'
          $IS_UBUNTU = 'false'

          if ( $env:BUILD_CONFIGURATION -ceq 'Debug' ) {
            $IS_CONFIGURATION_DEBUG = 'true'
          }
          if ( $env:BUILD_CONFIGURATION -ceq 'Release' ) {
            $IS_CONFIGURATION_RELEASE = 'true'
          }
          if ( ($env:GITHUB_EVENT_NAME -ceq 'push') -and ($env:GITHUB_REF -ceq 'refs/heads/master') ) {
            $IS_PUSH_TO_MASTER = 'true'
          }
          if ( $env:GITHUB_EVENT_NAME -ceq 'pull_request' ) {
            $IS_NOT_PR = 'false'
          }
          if ( ($env:GITHUB_EVENT_NAME -ceq 'push') -and ($env:GITHUB_REF -ceq 'refs/heads/master') -and ($env:BUILD_CONFIGURATION -ceq 'Release') -and ( $env:OS -ceq 'windows-latest' ) ) {
            $IS_GITHUB_RELEASE = 'true'
          }
          if ( $env:OS -ceq 'windows-latest' ) {
            $IS_WINDOWS = 'true'
          }
          if ( $env:OS -ceq 'ubuntu-latest' ) {
            $IS_UBUNTU = 'true'
          }

          echo "::set-output name=is_configuration_debug::$(echo $IS_CONFIGURATION_DEBUG)"
          echo "::set-output name=is_configuration_release::$(echo $IS_CONFIGURATION_RELEASE)"
          echo "::set-output name=is_push_to_master::$(echo $IS_PUSH_TO_MASTER)"
          echo "::set-output name=is_not_pr::$(echo $IS_NOT_PR)"
          echo "::set-output name=is_github_release::$(echo $IS_GITHUB_RELEASE)"
          echo "::set-output name=is_windows::$(echo $IS_WINDOWS)"
          echo "::set-output name=is_ubuntu::$(echo $IS_UBUNTU)"
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF: ${{ github.ref }}
          OS: ${{ matrix.os }}

      - if: steps.step_conditionals_handler.outputs.is_windows == 'true'
        name: Setup MSBuild
        id: setup_msbuild
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Checkout repository
        id: checkout_repo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
          fetch-depth: 0

      - name: Get semantic version from csproj
        id: get_semantic_version
        shell: pwsh
        run: |
          $xml = [xml](gc MimeKit/MimeKit.csproj)
          $SEMANTIC_VERSION_NUMBER = $xml.Project.PropertyGroup.VersionPrefix
          echo "::set-output name=version_num::$(echo $SEMANTIC_VERSION_NUMBER[0].Trim())"
          echo "::set-output name=version_tag::$(echo v"$SEMANTIC_VERSION_NUMBER[0].Trim()")"

      - if: steps.step_conditionals_handler.outputs.is_github_release == 'true'
        name: Get latest tag
        id: get_latest_tag
        shell: pwsh
        run: |
          $LATEST_TAG = git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags "https://github.com/$env:GIT_URL.git" '*.*.*' | tail --lines=1 | cut --delimiter='/' --fields=3
          echo "::set-output name=tag::$(echo $LATEST_TAG)"
        env:
          GIT_URL: ${{ github.repository }}
          
      - if: steps.step_conditionals_handler.outputs.is_github_release == 'true' && steps.get_semantic_version.outputs.version_tag != steps.get_latest_tag.outputs.tag
        name: Add new tag to repo
        id: add_new_tag_to_repo
        shell: pwsh
        run: |
          git config --global user.name $env:GIT_USER_NAME
          git config --global user.email $env:GIT_USER_EMAIL
          git tag -a -m "Tagged for $env:NEW_VERSION_NUM" $env:NEW_VERSION_NUM
          git push --follow-tags
        env:
          GIT_USER_NAME: ${{ github.event.head_commit.author.username }}
          GIT_USER_EMAIL: ${{ github.event.head_commit.author.email }}
          NEW_VERSION_NUM: ${{ steps.get_semantic_version.outputs.version_num }}

      - name: Run NuGet restore
        id: run_nuget_restore
        shell: pwsh
        run: |
          nuget restore $env:SOLUTION_PATH
      
      - name: Run .NET restore
        shell: pwsh
        run: |
          dotnet restore $env:SOLUTION_PATH

      - name: Build solution
        id: build_solution
        continue-on-error: true
        shell: pwsh
        run: |
          msbuild $env:SOLUTION_PATH `
          /p:Platform=$env:BUILD_PLATFORM `
          /p:Configuration=$env:BUILD_CONFIGURATION `
          /p:MonoRuntime=$env:IS_UBUNTU
        env:
          IS_UBUNTU: ${{ steps.step_conditionals_handler.outputs.is_ubuntu }}

      - if: steps.step_conditionals_handler.outputs.is_configuration_release == 'true'
        name: Run unit tests
        id: run_unit_tests
        continue-on-error: true
        shell: pwsh
        run: |
          $NUnitConsoleRunner = Join-Path $Home ".nuget/packages/nunit.consolerunner/3.12.0/tools/nunit3-console.exe"

          & $NUnitConsoleRunner --domain:single "UnitTests/bin/Release/net48/UnitTests.dll"

      - if: steps.step_conditionals_handler.outputs.is_configuration_release == 'true'
        name: Upload unit test results as artifact
        id: upload_test_results
        continue-on-error: true
        uses: actions/upload-artifact@v1
        with:
          name: Unit test results
          path: TestResult.xml

      - if: steps.step_conditionals_handler.outputs.is_configuration_debug == 'true' && steps.step_conditionals_handler.outputs.is_windows == 'true'
        name: Run unit tests and upload to Coveralls
        id: test_results_to_coveralls
        shell: pwsh
        run: |
          & ./coveralls.ps1
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          GIT_COMMIT_SHA: ${{ github.sha }}
          GIT_REF: ${{ github.ref }}
          GIT_ACTOR: ${{ github.event.head_commit.author.username }}
          GIT_ACTOR_EMAIL: ${{ github.event.head_commit.author.email }}
          GIT_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          COVERALLS_JOB_ID: ${{ steps.get_semantic_version.outputs.version_num }}.${{ env.GITHUB_RUN_NUMBER }}

      - if: steps.step_conditionals_handler.outputs.is_github_release == 'true'
        name: Create NuGet package
        id: create_nuget_package
        shell: pwsh
        run: |
          nuget pack nuget/MimeKit.nuspec `
          -Version "$env:LATEST_VERSION.$env:GITHUB_RUN_NUMBER"
        env:
          LATEST_VERSION: ${{ steps.get_semantic_version.outputs.version_num }}          

      - if: steps.step_conditionals_handler.outputs.is_github_release == 'true'
        name: Push NuGet package to MyGet
        id: push_nuget_package
        shell: pwsh
        run: |
          nuget push $env:NUGET_PKG_PATH `
          -ApiKey $env:MYGET_API_KEY `
          -Source https://www.myget.org/F/mimekit/api/v3/index.json
        env:
          NUGET_PKG_PATH: MimeKit.${{ steps.get_semantic_version.outputs.version_num }}.${{ env.GITHUB_RUN_NUMBER }}.nupkg
          MYGET_API_KEY: ${{ secrets.MYGET_API_KEY }}

      - if: steps.step_conditionals_handler.outputs.is_github_release == 'true'
        name: Upload NuGet package as artifact
        id: upload_nuget_package
        uses: actions/upload-artifact@v1
        with:
          name: MimeKit.${{ steps.get_semantic_version.outputs.version_num }}.${{ env.GITHUB_RUN_NUMBER }}.nupkg
          path: MimeKit.${{ steps.get_semantic_version.outputs.version_num }}.${{ env.GITHUB_RUN_NUMBER }}.nupkg

# Built with ‚ù§ by [Pipeline Foundation](https://pipeline.foundation)