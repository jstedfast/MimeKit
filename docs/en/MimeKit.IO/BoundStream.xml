<Type Name="BoundStream" FullName="MimeKit.IO.BoundStream">
  <TypeSignature Language="C#" Value="public class BoundStream : System.IO.Stream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BoundStream extends System.IO.Stream" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>0.32.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A bounded stream, confined to reading and writing data to a limited subset of the overall source stream.
            </summary>
    <remarks>
      <para>Wraps an arbitrary stream, limiting I/O operations to a subset of the source stream.
            If the <see cref="P:MimeKit.IO.BoundStream.EndBoundary" /> is <c>-1</c>, then the end of the stream is unbound.</para>
      <para>When a <see cref="T:MimeKit.MimeParser" /> is set to parse a persistent stream, it will construct
            <see cref="T:MimeKit.ContentObject" />s using bounded streams instead of loading the content into memory.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BoundStream (System.IO.Stream baseStream, long startBoundary, long endBoundary, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream baseStream, int64 startBoundary, int64 endBoundary, bool leaveOpen) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseStream" Type="System.IO.Stream" />
        <Parameter Name="startBoundary" Type="System.Int64" />
        <Parameter Name="endBoundary" Type="System.Int64" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="baseStream">The underlying stream.</param>
        <param name="startBoundary">The offset in the base stream that will mark the start of this substream.</param>
        <param name="endBoundary">The offset in the base stream that will mark the end of this substream.</param>
        <param name="leaveOpen">
          <c>true</c> to leave the baseStream open after the
            <see cref="T:MimeKit.IO.BoundStream" /> is disposed; otherwise, <c>false</c>.</param>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.IO.BoundStream" /> class.
            </summary>
        <remarks>
            If the <paramref name="endBoundary" /> is less than <c>0</c>, then the end of the stream
            is unbounded.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="baseStream" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="startBoundary" /> is less than zero.</para>
          <para>-or-</para>
          <para>
            <paramref name="endBoundary" /> is greater than or equal to zero
            -and- is less than <paramref name="startBoundary" />.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BaseStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream BaseStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BaseStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the underlying stream.
            </summary>
        <value>The underlying stream.</value>
        <remarks>
            All I/O is performed on the base stream.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Checks whether or not the stream supports reading.
            </summary>
        <value>
          <c>true</c> if the stream supports reading; otherwise, <c>false</c>.</value>
        <remarks>
            The <see cref="T:MimeKit.IO.BoundStream" /> will only support reading if the
            <see cref="P:MimeKit.IO.BoundStream.BaseStream" /> supports it.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Checks whether or not the stream supports seeking.
            </summary>
        <value>
          <c>true</c> if the stream supports seeking; otherwise, <c>false</c>.</value>
        <remarks>
            The <see cref="T:MimeKit.IO.BoundStream" /> will only support seeking if the
            <see cref="P:MimeKit.IO.BoundStream.BaseStream" /> supports it.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Checks whether or not I/O operations can timeout.
            </summary>
        <value>
          <c>true</c> if I/O operations can timeout; otherwise, <c>false</c>.</value>
        <remarks>
            The <see cref="T:MimeKit.IO.BoundStream" /> will only support timing out if the
            <see cref="P:MimeKit.IO.BoundStream.BaseStream" /> supports it.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Checks whether or not the stream supports writing.
            </summary>
        <value>
          <c>true</c> if the stream supports writing; otherwise, <c>false</c>.</value>
        <remarks>
            The <see cref="T:MimeKit.IO.BoundStream" /> will only support writing if the
            <see cref="P:MimeKit.IO.BoundStream.BaseStream" /> supports it.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        <summary>
            Releases the unmanaged resources used by the <see cref="T:MimeKit.IO.BoundStream" /> and
            optionally releases the managed resources.
            </summary>
        <remarks>
            If the <see cref="P:MimeKit.IO.BoundStream.LeaveOpen" /> property is <c>false</c>, then
            the <see cref="P:MimeKit.IO.BoundStream.BaseStream" /> is also disposed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBoundary">
      <MemberSignature Language="C#" Value="public long EndBoundary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 EndBoundary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the end boundary offset of the underlying stream.
            </summary>
        <value>The end boundary offset of the underlying stream.</value>
        <remarks>
            The end boundary is the byte offset into the <see cref="P:MimeKit.IO.BoundStream.BaseStream" />
            that marks the end of the substream. If the value is less than 0,
            then the end of the stream is treated as unbound.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clears all buffers for this stream and causes any buffered data to be written
            to the underlying device.
            </summary>
        <remarks>
            Flushes the <see cref="P:MimeKit.IO.BoundStream.BaseStream" />.
            </remarks>
        <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the length of the stream, in bytes.
            </summary>
        <value>The length of the stream in bytes.</value>
        <remarks>
            If the <see cref="P:MimeKit.IO.BoundStream.EndBoundary" /> property is greater than or equal to <c>0</c>,
            then the length will be calculated by subtracting the <see cref="P:MimeKit.IO.BoundStream.StartBoundary" />
            from the <see cref="P:MimeKit.IO.BoundStream.EndBoundary" />. If the end of the stream is unbound, then the
            <see cref="P:MimeKit.IO.BoundStream.StartBoundary" /> will be subtracted from the length of the
            <see cref="P:MimeKit.IO.BoundStream.BaseStream" />.
            </remarks>
        <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the current position within the stream.
            </summary>
        <value>The position of the stream.</value>
        <remarks>
            The <see cref="P:MimeKit.IO.BoundStream.Position" /> is relative to the <see cref="P:MimeKit.IO.BoundStream.StartBoundary" />.
            </remarks>
        <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer to read data into.</param>
        <param name="offset">The offset into the buffer to start reading data.</param>
        <param name="count">The number of bytes to read.</param>
        <summary>
            Reads a sequence of bytes from the stream and advances the position
            within the stream by the number of bytes read.
            </summary>
        <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many
            bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        <remarks>
            Reads data from the <see cref="P:MimeKit.IO.BoundStream.BaseStream" />, not allowing it to
            read beyond the <see cref="P:MimeKit.IO.BoundStream.EndBoundary" />.
            </remarks>
        <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="offset" /> is less than zero or greater than the length of <paramref name="buffer" />.</para>
          <para>-or-</para>
          <para>The <paramref name="buffer" /> is not large enough to contain <paramref name="count" /> bytes strting
            at the specified <paramref name="offset" />.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.
            </summary>
        <value>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</value>
        <remarks>
            Gets or sets the <see cref="P:MimeKit.IO.BoundStream.BaseStream" />'s read timeout.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">The offset into the stream relative to the <paramref name="origin" />.</param>
        <param name="origin">The origin to seek from.</param>
        <summary>
            Sets the position within the current stream.
            </summary>
        <returns>The new position within the stream.</returns>
        <remarks>
            Seeks within the confines of the <see cref="P:MimeKit.IO.BoundStream.StartBoundary" /> and the <see cref="P:MimeKit.IO.BoundStream.EndBoundary" />.
            </remarks>
        <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="origin" /> is not a valid <see cref="T:System.IO.SeekOrigin" />.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The desired length of the stream in bytes.</param>
        <summary>
            Sets the length of the stream.
            </summary>
        <remarks>
            Updates the <see cref="P:MimeKit.IO.BoundStream.EndBoundary" /> to be <see cref="P:MimeKit.IO.BoundStream.StartBoundary" /> plus
            the specified new length. If the <see cref="P:MimeKit.IO.BoundStream.BaseStream" /> needs to be grown
            to allow this, then the length of the <see cref="P:MimeKit.IO.BoundStream.BaseStream" /> will also be
            updated.
            </remarks>
        <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        <exception cref="T:System.NotSupportedException">
            The stream does not support setting the length.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="StartBoundary">
      <MemberSignature Language="C#" Value="public long StartBoundary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 StartBoundary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the start boundary offset of the underlying stream.
            </summary>
        <value>The start boundary offset of the underlying stream.</value>
        <remarks>
            The start boundary is the byte offset into the <see cref="P:MimeKit.IO.BoundStream.BaseStream" />
            that marks the beginning of the substream.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer to write.</param>
        <param name="offset">The offset of the first byte to write.</param>
        <param name="count">The number of bytes to write.</param>
        <summary>
            Writes a sequence of bytes to the stream and advances the current
            position within this stream by the number of bytes written.
            </summary>
        <remarks>
            Writes data to the <see cref="P:MimeKit.IO.BoundStream.BaseStream" />, not allowing it to
            write beyond the <see cref="P:MimeKit.IO.BoundStream.EndBoundary" />.
            </remarks>
        <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="offset" /> is less than zero or greater than the length of <paramref name="buffer" />.</para>
          <para>-or-</para>
          <para>The <paramref name="buffer" /> is not large enough to contain <paramref name="count" /> bytes strting
            at the specified <paramref name="offset" />.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.
            </summary>
        <value>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</value>
        <remarks>
            Gets or sets the <see cref="P:MimeKit.IO.BoundStream.BaseStream" />'s write timeout.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
