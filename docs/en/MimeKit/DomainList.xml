<Type Name="DomainList" FullName="MimeKit.DomainList">
  <TypeSignature Language="C#" Value="public class DomainList : System.Collections.Generic.ICollection&lt;string&gt;, System.Collections.Generic.IEnumerable&lt;string&gt;, System.Collections.Generic.IList&lt;string&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DomainList extends System.Object implements class System.Collections.Generic.ICollection`1&lt;string&gt;, class System.Collections.Generic.IEnumerable`1&lt;string&gt;, class System.Collections.Generic.IList`1&lt;string&gt;, class System.Collections.IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>0.32.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;System.String&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A domain list.
            </summary>
    <remarks>
            Represents a list of domains, such as those that an email was routed through.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DomainList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.DomainList" /> class.
            </summary>
        <remarks>
            Creates a new <see cref="T:MimeKit.DomainList" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DomainList (System.Collections.Generic.IEnumerable&lt;string&gt; domains);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;string&gt; domains) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="domains" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="domains">A domain list.</param>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.DomainList" /> class.
            </summary>
        <remarks>
            Creates a new <see cref="T:MimeKit.DomainList" /> based on the domains provided.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="domains" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string domain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(string domain) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="domain">The domain.</param>
        <summary>
            Add the specified domain.
            </summary>
        <remarks>
            Adds the specified domain to the end of the list.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="domain" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clears the domain list.
            </summary>
        <remarks>
            Removes all of the domains in the list.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string domain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(string domain) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="domain">The domain.</param>
        <summary>
            Checks if the <see cref="T:MimeKit.DomainList" /> contains the specified domain.
            </summary>
        <returns>
          <value>true</value> if the specified domain is contained;
            otherwise <value>false</value>.</returns>
        <remarks>
            Determines whether or not the domain list contains the specified domain.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="domain" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (string[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(string[] array, int32 arrayIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.String[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The array to copy the domains to.</param>
        <param name="arrayIndex">The index into the array.</param>
        <summary>
            Copies all of the domains in the <see cref="T:MimeKit.DomainList" /> to the specified array.
            </summary>
        <remarks>
            Copies all of the domains within the <see cref="T:MimeKit.DomainList" /> into the array,
            starting at the specified array index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="arrayIndex" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the number of domains in the <see cref="T:MimeKit.DomainList" />.
            </summary>
        <value>The number of domains.</value>
        <remarks>
            Indicates the number of domains in the list.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;string&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;string&gt; GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets an enumerator for the list of domains.
            </summary>
        <returns>The enumerator.</returns>
        <remarks>
            Gets an enumerator for the list of domains.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string domain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string domain) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="domain">The domain.</param>
        <summary>
            Gets the index of the requested domain, if it exists.
            </summary>
        <returns>The index of the requested domain; otherwise <value>-1</value>.</returns>
        <remarks>
            Finds the index of the specified domain, if it exists.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="domain" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, string domain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, string domain) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="domain" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">The index to insert the domain.</param>
        <param name="domain">The domain to insert.</param>
        <summary>
            Insert the domain at the specified index.
            </summary>
        <remarks>
            Inserts the domain at the specified index in the list.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="domain" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
        <value>
          <c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        <remarks>
            A <see cref="T:MimeKit.DomainList" /> is never read-only.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public string this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index.</param>
        <summary>
            Gets or sets the domain at the specified index.
            </summary>
        <value>The domain at the specified index.</value>
        <remarks>
            Gets or sets the domain at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (string domain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(string domain) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="domain">The domain.</param>
        <summary>
            Removes the specified domain.
            </summary>
        <returns>
          <value>true</value> if the domain was removed; otherwise <value>false</value>.</returns>
        <remarks>
            Removes the first instance of the specified domain from the list if it exists.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="domain" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index.</param>
        <summary>
            Removes the domain at the specified index.
            </summary>
        <remarks>
            Removes the domain at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets an enumerator for the list of domains.
            </summary>
        <returns>The enumerator.</returns>
        <remarks>
            Gets an enumerator for the list of domains.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a string representation of the list of domains.
            </summary>
        <returns>A string representing the <see cref="T:MimeKit.DomainList" />.</returns>
        <remarks>
          <para>Each non-empty domain string will be prepended by an '@'.</para>
          <para>If there are multiple domains in the list, they will be separated by a comma.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
