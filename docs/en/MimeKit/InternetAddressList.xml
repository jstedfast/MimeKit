<Type Name="InternetAddressList" FullName="MimeKit.InternetAddressList">
  <TypeSignature Language="C#" Value="public class InternetAddressList : IEquatable&lt;MimeKit.InternetAddressList&gt;, System.Collections.Generic.ICollection&lt;MimeKit.InternetAddress&gt;, System.Collections.Generic.IEnumerable&lt;MimeKit.InternetAddress&gt;, System.Collections.Generic.IList&lt;MimeKit.InternetAddress&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InternetAddressList extends System.Object implements class System.Collections.Generic.ICollection`1&lt;class MimeKit.InternetAddress&gt;, class System.Collections.Generic.IEnumerable`1&lt;class MimeKit.InternetAddress&gt;, class System.Collections.Generic.IList`1&lt;class MimeKit.InternetAddress&gt;, class System.Collections.IEnumerable, class System.IEquatable`1&lt;class MimeKit.InternetAddressList&gt;" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>0.32.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;MimeKit.InternetAddress&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;MimeKit.InternetAddress&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;MimeKit.InternetAddress&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;MimeKit.InternetAddressList&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A list of email addresses.
            </summary>
    <remarks>
      <para>An <see cref="T:MimeKit.InternetAddressList" /> may contain any number of addresses of any type
            defined by the original Internet Message specification.</para>
      <para>There are effectively two (2) types of addresses: mailboxes and groups.</para>
      <para>Mailbox addresses are what are most commonly known as email addresses and are
            represented by the <see cref="T:MimeKit.MailboxAddress" /> class.</para>
      <para>Group addresses are themselves lists of addresses and are represented by the
            <see cref="T:MimeKit.GroupAddress" /> class. While rare, it is still important to handle these
            types of addresses. They typically only contain mailbox addresses, but may also
            contain other group addresses.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternetAddressList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.InternetAddressList" /> class.
            </summary>
        <remarks>
            Creates a new, empty, <see cref="T:MimeKit.InternetAddressList" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternetAddressList (System.Collections.Generic.IEnumerable&lt;MimeKit.InternetAddress&gt; addresses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class MimeKit.InternetAddress&gt; addresses) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="addresses" Type="System.Collections.Generic.IEnumerable&lt;MimeKit.InternetAddress&gt;" />
      </Parameters>
      <Docs>
        <param name="addresses">An initial list of addresses.</param>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.InternetAddressList" /> class.
            </summary>
        <remarks>
            Creates a new <see cref="T:MimeKit.InternetAddressList" /> containing the supplied addresses.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="addresses" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (MimeKit.InternetAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class MimeKit.InternetAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="MimeKit.InternetAddress" />
      </Parameters>
      <Docs>
        <param name="address">The address.</param>
        <summary>
            Adds the specified address.
            </summary>
        <remarks>
            Adds the specified address to the end of the address list.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.Generic.IEnumerable&lt;MimeKit.InternetAddress&gt; addresses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Collections.Generic.IEnumerable`1&lt;class MimeKit.InternetAddress&gt; addresses) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Collections.Generic.IEnumerable&lt;MimeKit.InternetAddress&gt;" />
      </Parameters>
      <Docs>
        <param name="addresses">A colelction of addresses.</param>
        <summary>
            Adds a collection of addresses.
            </summary>
        <remarks>
            Adds a range of addresses to the end of the address list.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="addresses" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clears the address list.
            </summary>
        <remarks>
            Removes all of the addresses from the list.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (MimeKit.InternetAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class MimeKit.InternetAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="MimeKit.InternetAddress" />
      </Parameters>
      <Docs>
        <param name="address">The address.</param>
        <summary>
            Checks if the <see cref="T:MimeKit.InternetAddressList" /> contains the specified address.
            </summary>
        <returns>
          <value>true</value> if the specified address exists;
            otherwise <value>false</value>.</returns>
        <remarks>
            Determines whether or not the address list contains the specified address.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (MimeKit.InternetAddress[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class MimeKit.InternetAddress[] array, int32 arrayIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="MimeKit.InternetAddress[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The array to copy the addresses to.</param>
        <param name="arrayIndex">The index into the array.</param>
        <summary>
            Copies all of the addresses in the <see cref="T:MimeKit.InternetAddressList" /> to the specified array.
            </summary>
        <remarks>
            Copies all of the addresses within the <see cref="T:MimeKit.InternetAddressList" /> into the array,
            starting at the specified array index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="arrayIndex" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the number of addresses in the <see cref="T:MimeKit.InternetAddressList" />.
            </summary>
        <value>The number of addresses.</value>
        <remarks>
            Indicates the number of addresses in the list.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (MimeKit.InternetAddressList other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class MimeKit.InternetAddressList other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="MimeKit.InternetAddressList" />
      </Parameters>
      <Docs>
        <param name="other">The <see cref="T:MimeKit.InternetAddressList" /> to compare with the current <see cref="T:MimeKit.InternetAddressList" />.</param>
        <summary>
            Determines whether the specified <see cref="T:MimeKit.InternetAddressList" /> is equal to the current <see cref="T:MimeKit.InternetAddressList" />.
            </summary>
        <returns>
          <c>true</c> if the specified <see cref="T:MimeKit.InternetAddressList" /> is equal to the current
            <see cref="T:MimeKit.InternetAddressList" />; otherwise, <c>false</c>.</returns>
        <remarks>
            Determines whether the specified <see cref="T:MimeKit.InternetAddressList" /> is equal to the current <see cref="T:MimeKit.InternetAddressList" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;MimeKit.InternetAddress&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class MimeKit.InternetAddress&gt; GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;MimeKit.InternetAddress&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets an enumerator for the list of addresses.
            </summary>
        <returns>The enumerator.</returns>
        <remarks>
            Gets an enumerator for the list of addresses.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (MimeKit.InternetAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(class MimeKit.InternetAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="MimeKit.InternetAddress" />
      </Parameters>
      <Docs>
        <param name="address">The address to get the index of.</param>
        <summary>
            Gets the index of the specified address.
            </summary>
        <returns>The index of the specified address if found; otherwise <c>-1</c>.</returns>
        <remarks>
            Finds the index of the specified address, if it exists.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, MimeKit.InternetAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, class MimeKit.InternetAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="address" Type="MimeKit.InternetAddress" />
      </Parameters>
      <Docs>
        <param name="index">The index to insert the address.</param>
        <param name="address">The address.</param>
        <summary>
            Inserts the address at the specified index.
            </summary>
        <remarks>
            Inserts the address at the specified index in the list.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
        <value>
          <c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        <remarks>
            A <see cref="T:MimeKit.InternetAddressList" /> is never read-only.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public MimeKit.InternetAddress this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.InternetAddress Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of the address to get or set.</param>
        <summary>
            Gets or sets the <see cref="T:MimeKit.InternetAddress" /> at the specified index.
            </summary>
        <value>The internet address at the specified index.</value>
        <remarks>
            Gets or sets the <see cref="T:MimeKit.InternetAddress" /> at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Mailboxes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;MimeKit.MailboxAddress&gt; Mailboxes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class MimeKit.MailboxAddress&gt; Mailboxes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;MimeKit.MailboxAddress&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Recursively gets all of the mailboxes contained within the <see cref="T:MimeKit.InternetAddressList" />.
            </summary>
        <value>The mailboxes.</value>
        <remarks>
            This API is useful for collecting a flattened list of <see cref="T:MimeKit.MailboxAddress" />
            recipients for use with sending via SMTP or for encrypting via S/MIME or PGP/MIME.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static System.Net.Mail.MailAddressCollection op_Explicit (MimeKit.InternetAddressList addresses);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Net.Mail.MailAddressCollection op_Explicit(class MimeKit.InternetAddressList addresses) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.MailAddressCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="MimeKit.InternetAddressList" />
      </Parameters>
      <Docs>
        <param name="addresses">The addresses.</param>
        <summary>
            Explicit cast to convert a <see cref="T:MimeKit.InternetAddressList" /> to a
            <see cref="T:System.Net.Mail.MailAddressCollection" />.
            </summary>
        <returns>The equivalent <see cref="T:System.Net.Mail.MailAddressCollection" />.</returns>
        <remarks>
            Casts a <see cref="T:MimeKit.InternetAddressList" /> to a <see cref="T:System.Net.Mail.MailAddressCollection" />
            in cases where you might want to make use of the System.Net.Mail APIs.
            </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="addresses" /> contains one or more group addresses and cannot be converted.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static MimeKit.InternetAddressList op_Explicit (System.Net.Mail.MailAddressCollection addresses);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class MimeKit.InternetAddressList op_Explicit(class System.Net.Mail.MailAddressCollection addresses) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.Mail.MailAddressCollection" />
      </Parameters>
      <Docs>
        <param name="addresses">The mail address.</param>
        <summary>
            Explicit cast to convert a <see cref="T:System.Net.Mail.MailAddressCollection" />
            to a <see cref="T:MimeKit.InternetAddressList" />.
            </summary>
        <returns>The equivalent <see cref="T:MimeKit.InternetAddressList" />.</returns>
        <remarks>
            Casts a <see cref="T:System.Net.Mail.MailAddressCollection" /> to a <see cref="T:MimeKit.InternetAddressList" />
            in cases where you might want to make use of the the superior MimeKit APIs.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static MimeKit.InternetAddressList Parse (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.InternetAddressList Parse(unsigned int8[] buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer">The input buffer.</param>
        <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>The parsed <see cref="T:MimeKit.InternetAddressList" />.</returns>
        <remarks>
            Parses a list of addresses from the specified buffer.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <c>null</c>.
            </exception>
        <exception cref="T:MimeKit.ParseException">
          <paramref name="buffer" /> could not be parsed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static MimeKit.InternetAddressList Parse (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.InternetAddressList Parse(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text.</param>
        <summary>
            Parses the given text into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>The parsed <see cref="T:MimeKit.InternetAddressList" />.</returns>
        <remarks>
            Parses a list of addresses from the specified text.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> is <c>null</c>.
            </exception>
        <exception cref="T:MimeKit.ParseException">
          <paramref name="text" /> could not be parsed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static MimeKit.InternetAddressList Parse (MimeKit.ParserOptions options, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.InternetAddressList Parse(class MimeKit.ParserOptions options, unsigned int8[] buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="options">The parser options to use.</param>
        <param name="buffer">The input buffer.</param>
        <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>The parsed <see cref="T:MimeKit.InternetAddressList" />.</returns>
        <remarks>
            Parses a list of addresses from the specified buffer.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="buffer" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:MimeKit.ParseException">
          <paramref name="buffer" /> could not be parsed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static MimeKit.InternetAddressList Parse (MimeKit.ParserOptions options, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.InternetAddressList Parse(class MimeKit.ParserOptions options, string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="options">The parser options to use.</param>
        <param name="text">The text.</param>
        <summary>
            Parses the given text into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>The parsed <see cref="T:MimeKit.InternetAddressList" />.</returns>
        <remarks>
            Parses a list of addresses from the specified text.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="text" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:MimeKit.ParseException">
          <paramref name="text" /> could not be parsed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static MimeKit.InternetAddressList Parse (byte[] buffer, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.InternetAddressList Parse(unsigned int8[] buffer, int32 startIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The input buffer.</param>
        <param name="startIndex">The starting index of the input buffer.</param>
        <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>The parsed <see cref="T:MimeKit.InternetAddressList" />.</returns>
        <remarks>
            Parses a list of addresses from the supplied buffer starting at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is out of range.
            </exception>
        <exception cref="T:MimeKit.ParseException">
          <paramref name="buffer" /> could not be parsed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static MimeKit.InternetAddressList Parse (MimeKit.ParserOptions options, byte[] buffer, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.InternetAddressList Parse(class MimeKit.ParserOptions options, unsigned int8[] buffer, int32 startIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="options">The parser options to use.</param>
        <param name="buffer">The input buffer.</param>
        <param name="startIndex">The starting index of the input buffer.</param>
        <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>The parsed <see cref="T:MimeKit.InternetAddressList" />.</returns>
        <remarks>
            Parses a list of addresses from the supplied buffer starting at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="buffer" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" />is out of range.
            </exception>
        <exception cref="T:MimeKit.ParseException">
          <paramref name="buffer" /> could not be parsed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static MimeKit.InternetAddressList Parse (byte[] buffer, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.InternetAddressList Parse(unsigned int8[] buffer, int32 startIndex, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The input buffer.</param>
        <param name="startIndex">The starting index of the input buffer.</param>
        <param name="length">The number of bytes in the input buffer to parse.</param>
        <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>The parsed <see cref="T:MimeKit.InternetAddressList" />.</returns>
        <remarks>
            Parses a list of addresses from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> and <paramref name="length" /> do not specify
            a valid range in the byte array.
            </exception>
        <exception cref="T:MimeKit.ParseException">
          <paramref name="buffer" /> could not be parsed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static MimeKit.InternetAddressList Parse (MimeKit.ParserOptions options, byte[] buffer, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.InternetAddressList Parse(class MimeKit.ParserOptions options, unsigned int8[] buffer, int32 startIndex, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="options">The parser options to use.</param>
        <param name="buffer">The input buffer.</param>
        <param name="startIndex">The starting index of the input buffer.</param>
        <param name="length">The number of bytes in the input buffer to parse.</param>
        <summary>
            Parses the given input buffer into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>The parsed <see cref="T:MimeKit.InternetAddressList" />.</returns>
        <remarks>
            Parses a list of addresses from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="buffer" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> and <paramref name="length" /> do not specify
            a valid range in the byte array.
            </exception>
        <exception cref="T:MimeKit.ParseException">
          <paramref name="buffer" /> could not be parsed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (MimeKit.InternetAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(class MimeKit.InternetAddress address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="MimeKit.InternetAddress" />
      </Parameters>
      <Docs>
        <param name="address">The address.</param>
        <summary>
            Removes the specified address.
            </summary>
        <returns>
          <value>true</value> if the address was removed; otherwise <value>false</value>.</returns>
        <remarks>
            Removes the specified address.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of the address to remove.</param>
        <summary>
            Removes the address at the specified index.
            </summary>
        <remarks>
            Removes the address at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets an enumerator for the list of addresses.
            </summary>
        <returns>The enumerator.</returns>
        <remarks>
            Gets an enumerator for the list of addresses.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a string representation of the email addresses in the <see cref="T:MimeKit.InternetAddressList" />.
            </summary>
        <returns>A string representing the <see cref="T:MimeKit.InternetAddressList" />.</returns>
        <remarks>
            If there are multiple addresses in the list, they will be separated by a comma.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(bool encode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encode">If set to <c>true</c>, each <see cref="T:MimeKit.InternetAddress" /> in the list will be encoded.</param>
        <summary>
            Returns a string representation of the email addresses in the <see cref="T:MimeKit.InternetAddressList" />,
            optionally encoding them for transport.
            </summary>
        <returns>A string representing the <see cref="T:MimeKit.InternetAddressList" />.</returns>
        <remarks>
          <para>If <paramref name="encode" /> is <c>true</c>, each address in the list will be encoded
            according to the rules defined in rfc2047.</para>
          <para>If there are multiple addresses in the list, they will be separated by a comma.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (MimeKit.FormatOptions options, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class MimeKit.FormatOptions options, bool encode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.FormatOptions" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="options">The formatting options.</param>
        <param name="encode">If set to <c>true</c>, each <see cref="T:MimeKit.InternetAddress" /> in the list will be encoded.</param>
        <summary>
            Returns a string representation of the email addresses in the <see cref="T:MimeKit.InternetAddressList" />,
            optionally encoding them for transport.
            </summary>
        <returns>A string representing the <see cref="T:MimeKit.InternetAddressList" />.</returns>
        <remarks>
          <para>If <paramref name="encode" /> is <c>true</c>, each address in the list will be encoded
            according to the rules defined in rfc2047.</para>
          <para>If there are multiple addresses in the list, they will be separated by a comma.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (byte[] buffer, out MimeKit.InternetAddressList addresses);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(unsigned int8[] buffer, class MimeKit.InternetAddressList addresses) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="addresses" Type="MimeKit.InternetAddressList&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">The input buffer.</param>
        <param name="addresses">The parsed addresses.</param>
        <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a list of addresses from the specified buffer.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string text, out MimeKit.InternetAddressList addresses);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string text, class MimeKit.InternetAddressList addresses) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="addresses" Type="MimeKit.InternetAddressList&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">The text.</param>
        <param name="addresses">The parsed addresses.</param>
        <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a list of addresses from the specified text.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (MimeKit.ParserOptions options, byte[] buffer, out MimeKit.InternetAddressList addresses);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class MimeKit.ParserOptions options, unsigned int8[] buffer, class MimeKit.InternetAddressList addresses) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="addresses" Type="MimeKit.InternetAddressList&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="options">The parser options to use.</param>
        <param name="buffer">The input buffer.</param>
        <param name="addresses">The parsed addresses.</param>
        <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a list of addresses from the specified buffer.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="buffer" /> is <c>null</c>.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (MimeKit.ParserOptions options, string text, out MimeKit.InternetAddressList addresses);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class MimeKit.ParserOptions options, string text, class MimeKit.InternetAddressList addresses) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="addresses" Type="MimeKit.InternetAddressList&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="options">The parser options to use.</param>
        <param name="text">The text.</param>
        <param name="addresses">The parsed addresses.</param>
        <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a list of addresses from the specified text.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="text" /> is <c>null</c>.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (byte[] buffer, int startIndex, out MimeKit.InternetAddressList addresses);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(unsigned int8[] buffer, int32 startIndex, class MimeKit.InternetAddressList addresses) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="addresses" Type="MimeKit.InternetAddressList&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">The input buffer.</param>
        <param name="startIndex">The starting index of the input buffer.</param>
        <param name="addresses">The parsed addresses.</param>
        <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a list of addresses from the supplied buffer starting at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (MimeKit.ParserOptions options, byte[] buffer, int startIndex, out MimeKit.InternetAddressList addresses);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class MimeKit.ParserOptions options, unsigned int8[] buffer, int32 startIndex, class MimeKit.InternetAddressList addresses) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="addresses" Type="MimeKit.InternetAddressList&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="options">The parser options to use.</param>
        <param name="buffer">The input buffer.</param>
        <param name="startIndex">The starting index of the input buffer.</param>
        <param name="addresses">The parsed addresses.</param>
        <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a list of addresses from the supplied buffer starting at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="buffer" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (byte[] buffer, int startIndex, int length, out MimeKit.InternetAddressList addresses);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(unsigned int8[] buffer, int32 startIndex, int32 length, class MimeKit.InternetAddressList addresses) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="addresses" Type="MimeKit.InternetAddressList&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">The input buffer.</param>
        <param name="startIndex">The starting index of the input buffer.</param>
        <param name="length">The number of bytes in the input buffer to parse.</param>
        <param name="addresses">The parsed addresses.</param>
        <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a list of addresses from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> and <paramref name="length" /> do not specify
            a valid range in the byte array.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (MimeKit.ParserOptions options, byte[] buffer, int startIndex, int length, out MimeKit.InternetAddressList addresses);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class MimeKit.ParserOptions options, unsigned int8[] buffer, int32 startIndex, int32 length, class MimeKit.InternetAddressList addresses) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="addresses" Type="MimeKit.InternetAddressList&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="options">The parser options to use.</param>
        <param name="buffer">The input buffer.</param>
        <param name="startIndex">The starting index of the input buffer.</param>
        <param name="length">The number of bytes in the input buffer to parse.</param>
        <param name="addresses">The parsed addresses.</param>
        <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.InternetAddressList" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the address list was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a list of addresses from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="buffer" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> and <paramref name="length" /> do not specify
            a valid range in the byte array.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
