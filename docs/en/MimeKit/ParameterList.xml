<Type Name="ParameterList" FullName="MimeKit.ParameterList">
  <TypeSignature Language="C#" Value="public class ParameterList : System.Collections.Generic.ICollection&lt;MimeKit.Parameter&gt;, System.Collections.Generic.IEnumerable&lt;MimeKit.Parameter&gt;, System.Collections.Generic.IList&lt;MimeKit.Parameter&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParameterList extends System.Object implements class System.Collections.Generic.ICollection`1&lt;class MimeKit.Parameter&gt;, class System.Collections.Generic.IEnumerable`1&lt;class MimeKit.Parameter&gt;, class System.Collections.Generic.IList`1&lt;class MimeKit.Parameter&gt;, class System.Collections.IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>0.32.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;MimeKit.Parameter&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;MimeKit.Parameter&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;MimeKit.Parameter&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A list of parameters, as found in the Content-Type and Content-Disposition headers.
            </summary>
    <remarks>
            Parameters are used by both <see cref="T:MimeKit.ContentType" /> and <see cref="T:MimeKit.ContentDisposition" />.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParameterList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.ParameterList" /> class.
            </summary>
        <remarks>
            Creates a new parameter list.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (MimeKit.Parameter param);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class MimeKit.Parameter param) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="MimeKit.Parameter" />
      </Parameters>
      <Docs>
        <param name="param">The parameter to add.</param>
        <summary>
            Adds the specified parameter.
            </summary>
        <remarks>
            Adds the specified parameter to the end of the list.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="param" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentException">
            A parameter with the same name as <paramref name="param" />
            already exists.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The parameter name.</param>
        <param name="value">The parameter value.</param>
        <summary>
            Adds a parameter with the specified name and value.
            </summary>
        <remarks>
            Adds a new parameter to the list with the specified name and value.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="name" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="value" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
            The <paramref name="name" /> contains illegal characters.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clears the parameter list.
            </summary>
        <remarks>
            Removes all of the parameters from the list.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (MimeKit.Parameter param);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class MimeKit.Parameter param) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="MimeKit.Parameter" />
      </Parameters>
      <Docs>
        <param name="param">The parameter.</param>
        <summary>
            Checks if the <see cref="T:MimeKit.ParameterList" /> contains the specified parameter.
            </summary>
        <returns>
          <value>true</value> if the specified parameter is contained;
            otherwise <value>false</value>.</returns>
        <remarks>
            Determines whether or not the parameter list contains the specified parameter.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="param" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The parameter name.</param>
        <summary>
            Checks if the <see cref="T:MimeKit.ParameterList" /> contains a parameter with the specified name.
            </summary>
        <returns>
          <value>true</value> if the requested parameter exists;
            otherwise <value>false</value>.</returns>
        <remarks>
            Determines whether or not the parameter list contains a parameter with the specified name.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (MimeKit.Parameter[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class MimeKit.Parameter[] array, int32 arrayIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="MimeKit.Parameter[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The array to copy the parameters to.</param>
        <param name="arrayIndex">The index into the array.</param>
        <summary>
            Copies all of the contained parameters to the specified array.
            </summary>
        <remarks>
            Copies all of the parameters within the <see cref="T:MimeKit.ParameterList" /> into the array,
            starting at the specified array index.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the number of parameters in the <see cref="T:MimeKit.ParameterList" />.
            </summary>
        <value>The number of parameters.</value>
        <remarks>
            Indicates the number of parameters in the list.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;MimeKit.Parameter&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class MimeKit.Parameter&gt; GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;MimeKit.Parameter&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets an enumerator for the list of parameters.
            </summary>
        <returns>The enumerator.</returns>
        <remarks>
            Gets an enumerator for the list of parameters.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (MimeKit.Parameter param);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(class MimeKit.Parameter param) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="MimeKit.Parameter" />
      </Parameters>
      <Docs>
        <param name="param">The parameter.</param>
        <summary>
            Gets the index of the requested parameter, if it exists.
            </summary>
        <returns>The index of the requested parameter; otherwise <value>-1</value>.</returns>
        <remarks>
            Finds the index of the specified parameter, if it exists.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="param" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The parameter name.</param>
        <summary>
            Gets the index of the requested parameter, if it exists.
            </summary>
        <returns>The index of the requested parameter; otherwise <value>-1</value>.</returns>
        <remarks>
            Finds the index of the parameter with the specified name, if it exists.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, MimeKit.Parameter param);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, class MimeKit.Parameter param) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="param" Type="MimeKit.Parameter" />
      </Parameters>
      <Docs>
        <param name="index">The index to insert the parameter.</param>
        <param name="param">The parameter.</param>
        <summary>
            Inserts the specified parameter at the given index.
            </summary>
        <remarks>
            Inserts the parameter at the specified index in the list.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="param" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
        <exception cref="T:System.ArgumentException">
            A parameter with the same name as <paramref name="param" />
            already exists.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, string name, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">The index to insert the parameter.</param>
        <param name="name">The parameter name.</param>
        <param name="value">The parameter value.</param>
        <summary>
            Inserts a parameter with the specified name and value at the given index.
            </summary>
        <remarks>
            Inserts a new parameter with the given name and value at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="name" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="value" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
            The <paramref name="name" /> contains illegal characters.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
        <value>
          <c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        <remarks>
            A <see cref="T:MimeKit.ParameterList" /> is never read-only.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public MimeKit.Parameter this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.Parameter Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Parameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index.</param>
        <summary>
            Gets or sets the <see cref="T:MimeKit.Parameter" /> at the specified index.
            </summary>
        <value>The parameter at the specified index.</value>
        <remarks>
            Gets or sets the <see cref="T:MimeKit.Parameter" /> at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="value" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
        <exception cref="T:System.ArgumentException">
            A parameter with the same name as <paramref name="value" />
            already exists.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public string this[string name] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The parameter name.</param>
        <summary>
            Gets or sets the value of a parameter with the specified name.
            </summary>
        <value>The value of the specified parameter if it exists; otherwise <c>null</c>.</value>
        <remarks>
            Gets or sets the value of a parameter with the specified name.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="name" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="value" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
            The <paramref name="name" /> contains illegal characters.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (MimeKit.Parameter param);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(class MimeKit.Parameter param) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="MimeKit.Parameter" />
      </Parameters>
      <Docs>
        <param name="param">The parameter.</param>
        <summary>
            Removes the specified parameter.
            </summary>
        <returns>
          <value>true</value> if the specified parameter was removed;
            otherwise <value>false</value>.</returns>
        <remarks>
            Removes the specified parameter from the list.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="param" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The parameter name.</param>
        <summary>
            Removes the specified parameter.
            </summary>
        <returns>
          <value>true</value> if the specified parameter was removed;
            otherwise <value>false</value>.</returns>
        <remarks>
            Removes the parameter with the specified name from the list, if it exists.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index.</param>
        <summary>
            Removes the parameter at the specified index.
            </summary>
        <remarks>
            Removes the parameter at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets an enumerator for the list of parameters.
            </summary>
        <returns>The enumerator.</returns>
        <remarks>
            Gets an enumerator for the list of parameters.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a string representation of the parameters in the <see cref="T:MimeKit.ParameterList" />.
            </summary>
        <returns>A string representing the <see cref="T:MimeKit.ParameterList" />.</returns>
        <remarks>
            If there are multiple parameters in the list, they will be separated by a semicolon.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
