<Type Name="Header" FullName="MimeKit.Header">
  <TypeSignature Language="C#" Value="public class Header" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Header extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>0.32.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A class representing a Message or MIME header.
            </summary>
    <remarks>
            Represents a single header field and value pair.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Header (MimeKit.HeaderId id, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype MimeKit.HeaderId id, string value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="id" Type="MimeKit.HeaderId" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The header identifier.</param>
        <param name="value">The value of the header.</param>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Header" /> class.
            </summary>
        <remarks>
            Creates a new message or entity header for the specified field and
            value pair.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="id" /> is not a valid <see cref="T:MimeKit.HeaderId" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Header (string field, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string field, string value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="field" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="field">The name of the header field.</param>
        <param name="value">The value of the header.</param>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Header" /> class.
            </summary>
        <remarks>
            Creates a new message or entity header for the specified field and
            value pair.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="field" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="value" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
            The <paramref name="field" /> contains illegal characters.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Header (System.Text.Encoding charset, MimeKit.HeaderId id, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Text.Encoding charset, valuetype MimeKit.HeaderId id, string value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="charset" Type="System.Text.Encoding" />
        <Parameter Name="id" Type="MimeKit.HeaderId" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="charset">The charset that should be used to encode the
            header value.</param>
        <param name="id">The header identifier.</param>
        <param name="value">The value of the header.</param>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Header" /> class.
            </summary>
        <remarks>
            Creates a new message or entity header for the specified field and
            value pair. The encoding is used to determine which charset to use
            when encoding the value according to the rules of rfc2047.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="charset" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="value" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="id" /> is not a valid <see cref="T:MimeKit.HeaderId" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Header (System.Text.Encoding charset, string field, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Text.Encoding charset, string field, string value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="charset" Type="System.Text.Encoding" />
        <Parameter Name="field" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="charset">The charset that should be used to encode the
            header value.</param>
        <param name="field">The name of the header field.</param>
        <param name="value">The value of the header.</param>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Header" /> class.
            </summary>
        <remarks>
            Creates a new message or entity header for the specified field and
            value pair. The encoding is used to determine which charset to use
            when encoding the value according to the rules of rfc2047.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="charset" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="field" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="value" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
            The <paramref name="field" /> contains illegal characters.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public string Field { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Field" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the header field.
            </summary>
        <value>The name of the header field.</value>
        <remarks>
            Represents the field name of the header.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public string GetValue (System.Text.Encoding charset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetValue(class System.Text.Encoding charset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charset" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="charset">Charset.</param>
        <summary>
            Gets the header value using the specified charset.
            </summary>
        <returns>The value.</returns>
        <remarks>
          <para>If the raw header value does not properly encode non-ASCII text, the decoder
            will fall back to a default charset encoding. Sometimes, however, this
            default charset fallback is wrong and the mail client may wish to override
            that default charset on a per-header basis.</para>
          <para>By using this method, the client is able to override the fallback charset
            on a per-header basis.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public MimeKit.HeaderId Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MimeKit.HeaderId Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.HeaderId</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the header identifier.
            </summary>
        <value>The header identifier.</value>
        <remarks>
            This property is mainly used for switch-statements for performance reasons.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the stream offset of the beginning of the header.
            </summary>
        <value>The stream offset.</value>
        <remarks>
            If the offset is set, it refers to the byte offset where it
            was found in the stream it was parsed from.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RawValue">
      <MemberSignature Language="C#" Value="public byte[] RawValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] RawValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the raw value of the header.
            </summary>
        <value>The raw value of the header.</value>
        <remarks>
            Contains the raw value of the header, before any decoding or charset conversion.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Text.Encoding charset, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Text.Encoding charset, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charset" Type="System.Text.Encoding" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="charset">A charset encoding.</param>
        <param name="value">The header value.</param>
        <summary>
            Sets the header value using the specified charset.
            </summary>
        <remarks>
            When a particular charset is desired for encoding the header value
            according to the rules of rfc2047, this method should be used
            instead of the <see cref="P:MimeKit.Header.Value" /> setter.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="charset" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="value" /> is <c>null</c>.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a string representation of the header.
            </summary>
        <returns>A string representing the <see cref="T:MimeKit.Header" />.</returns>
        <remarks>
            Formats the header field and value in a way that is suitable for display.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (byte[] buffer, out MimeKit.Header header);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(unsigned int8[] buffer, class MimeKit.Header header) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="header" Type="MimeKit.Header&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">The input buffer.</param>
        <param name="header">The parsed header.</param>
        <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.Header" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a header from the specified buffer.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string text, out MimeKit.Header header);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string text, class MimeKit.Header header) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="header" Type="MimeKit.Header&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">The text to parse.</param>
        <param name="header">The parsed header.</param>
        <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.Header" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a header from the specified text.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (MimeKit.ParserOptions options, byte[] buffer, out MimeKit.Header header);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class MimeKit.ParserOptions options, unsigned int8[] buffer, class MimeKit.Header header) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="header" Type="MimeKit.Header&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="options">The parser options to use.</param>
        <param name="buffer">The input buffer.</param>
        <param name="header">The parsed header.</param>
        <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.Header" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a header from the specified buffer.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="buffer" /> is <c>null</c>.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (MimeKit.ParserOptions options, string text, out MimeKit.Header header);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class MimeKit.ParserOptions options, string text, class MimeKit.Header header) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="header" Type="MimeKit.Header&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="options">The parser options to use.</param>
        <param name="text">The text to parse.</param>
        <param name="header">The parsed header.</param>
        <summary>
            Tries to parse the given text into a new <see cref="T:MimeKit.Header" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a header from the specified text.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="text" /> is <c>null</c>.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (byte[] buffer, int startIndex, out MimeKit.Header header);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(unsigned int8[] buffer, int32 startIndex, class MimeKit.Header header) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="header" Type="MimeKit.Header&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">The input buffer.</param>
        <param name="startIndex">The starting index of the input buffer.</param>
        <param name="header">The parsed header.</param>
        <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.Header" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a header from the supplied buffer starting at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (MimeKit.ParserOptions options, byte[] buffer, int startIndex, out MimeKit.Header header);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class MimeKit.ParserOptions options, unsigned int8[] buffer, int32 startIndex, class MimeKit.Header header) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="header" Type="MimeKit.Header&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="options">The parser options to use.</param>
        <param name="buffer">The input buffer.</param>
        <param name="startIndex">The starting index of the input buffer.</param>
        <param name="header">The parsed header.</param>
        <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.Header" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a header from the supplied buffer starting at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="buffer" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (byte[] buffer, int startIndex, int length, out MimeKit.Header header);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(unsigned int8[] buffer, int32 startIndex, int32 length, class MimeKit.Header header) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="header" Type="MimeKit.Header&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">The input buffer.</param>
        <param name="startIndex">The starting index of the input buffer.</param>
        <param name="length">The number of bytes in the input buffer to parse.</param>
        <param name="header">The parsed header.</param>
        <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.Header" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a header from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> and <paramref name="length" /> do not specify
            a valid range in the byte array.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (MimeKit.ParserOptions options, byte[] buffer, int startIndex, int length, out MimeKit.Header header);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class MimeKit.ParserOptions options, unsigned int8[] buffer, int32 startIndex, int32 length, class MimeKit.Header header) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="header" Type="MimeKit.Header&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="options">The parser options to use.</param>
        <param name="buffer">The input buffer.</param>
        <param name="startIndex">The starting index of the input buffer.</param>
        <param name="length">The number of bytes in the input buffer to parse.</param>
        <param name="header">The parsed header.</param>
        <summary>
            Tries to parse the given input buffer into a new <see cref="T:MimeKit.Header" /> instance.
            </summary>
        <returns>
          <c>true</c>, if the header was successfully parsed, <c>false</c> otherwise.</returns>
        <remarks>
            Parses a header from the supplied buffer starting at the given index
            and spanning across the specified number of bytes.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="buffer" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> and <paramref name="length" /> do not specify
            a valid range in the byte array.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Unfold">
      <MemberSignature Language="C#" Value="public static string Unfold (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Unfold(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The header text.</param>
        <summary>
            Unfold the specified header value.
            </summary>
        <returns>The unfolded header value.</returns>
        <remarks>
            Unfolds the header value so that it becomes suitable for display.
            Since <see cref="P:MimeKit.Header.Value" /> is already unfolded, this method is really
            only needed when working with raw header strings.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the header value.
            </summary>
        <value>The header value.</value>
        <remarks>
            Represents the decoded header value and is suitable for displaying to the user.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
