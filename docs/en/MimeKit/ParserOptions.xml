<Type Name="ParserOptions" FullName="MimeKit.ParserOptions">
  <TypeSignature Language="C#" Value="public class ParserOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParserOptions extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>0.32.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Parser options as used by <see cref="T:MimeKit.MimeParser" /> as well as various Parse and TryParse methods in MimeKit.
            </summary>
    <remarks>
      <see cref="T:MimeKit.ParserOptions" /> allows you to change and/or override default parsing options
            used by methods such as <see cref="M:MimeKit.MimeMessage.Load(MimeKit.ParserOptions,System.IO.Stream)" /> and others.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParserOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.ParserOptions" /> class.
            </summary>
        <remarks>
            By default, new instances of <see cref="T:MimeKit.ParserOptions" /> enable rfc2047 work-arounds
            (which are needed for maximum interoperability with mail software used in the wild)
            and do not respect the Content-Length header value.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharsetEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding CharsetEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding CharsetEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the charset encoding to use as a fallback for 8bit headers.
            </summary>
        <value>The charset encoding.</value>
        <remarks>
          <see cref="M:MimeKit.Utils.Rfc2047.DecodeText(MimeKit.ParserOptions,System.Byte[])" /> and
            <see cref="M:MimeKit.Utils.Rfc2047.DecodePhrase(MimeKit.ParserOptions,System.Byte[])" />
            use this charset encoding as a fallback when decoding 8bit text into unicode. The first
            charset encoding attempted is UTF-8, followed by this charset encoding, before finally
            falling back to iso-8859-1.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public MimeKit.ParserOptions Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MimeKit.ParserOptions Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.ParserOptions</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clones an instance of <see cref="T:MimeKit.ParserOptions" />.
            </summary>
        <returns>An identical copy of the current instance.</returns>
        <remarks>
            Clones a set of options, allowing you to change a specific option
            without requiring you to change the original.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static readonly MimeKit.ParserOptions Default;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class MimeKit.ParserOptions Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.ParserOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The default parser options.
            </summary>
        <remarks>
            If a <see cref="T:MimeKit.ParserOptions" /> is not supplied to <see cref="T:MimeKit.MimeParser" /> or other Parse and TryParse
            methods throughout MimeKit, <see cref="F:MimeKit.ParserOptions.Default" /> will be used.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableRfc2047Workarounds">
      <MemberSignature Language="C#" Value="public bool EnableRfc2047Workarounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableRfc2047Workarounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating whether rfc2047 workarounds should be used.
            </summary>
        <value>
          <c>true</c> if rfc2047 workarounds are enabled; otherwise, <c>false</c>.</value>
        <remarks>
            In general, you'll probably want this value to be <c>true</c> (the default) as it
            allows maximum interoperability with existing (broken) mail clients and other mail
            software such as sloppily written perl scripts (aka spambots).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterMimeType">
      <MemberSignature Language="C#" Value="public void RegisterMimeType (string mimeType, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterMimeType(string mimeType, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mimeType" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="mimeType">The MIME type.</param>
        <param name="type">A custom subclass of <see cref="T:MimeKit.MimeEntity" />.</param>
        <summary>
            Registers the <see cref="T:MimeKit.MimeEntity" /> subclass for the specified mime-type.
            </summary>
        <remarks>
            Your custom <see cref="T:MimeKit.MimeEntity" /> class should not subclass
            <see cref="T:MimeKit.MimeEntity" /> directly, but rather it should subclass
            <see cref="T:MimeKit.Multipart" />, <see cref="T:MimeKit.MimePart" />,
            <see cref="T:MimeKit.MessagePart" />, or one of their derivatives.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="mimeType" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="type" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="type" /> is not a subclass of <see cref="T:MimeKit.Multipart" />,
            <see cref="T:MimeKit.MimePart" />, or <see cref="T:MimeKit.MessagePart" />.</para>
          <para>-or-</para>
          <para>
            <paramref name="type" /> does not have a constructor that takes
            only a <see cref="T:MimeKit.MimeEntityConstructorInfo" /> argument.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RespectContentLength">
      <MemberSignature Language="C#" Value="public bool RespectContentLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RespectContentLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating whether the Content-Length value should be
            respected when parsing mbox streams.
            </summary>
        <value>
          <c>true</c> if the Content-Length value should be respected;
            otherwise, <c>false</c>.</value>
        <remarks>
            For more details about why this may be useful, you can find more information
            at http://www.jwz.org/doc/content-length.html
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
