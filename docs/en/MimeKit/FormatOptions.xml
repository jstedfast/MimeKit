<Type Name="FormatOptions" FullName="MimeKit.FormatOptions">
  <TypeSignature Language="C#" Value="public class FormatOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FormatOptions extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Format options for serializing various MimeKit objects.
            </summary>
    <remarks>
            Represents the available options for formatting MIME messages
            and entities when writing them to a stream.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.FormatOptions" /> class.
            </summary>
        <remarks>
            Creates a new set of formatting options for use with methods such as
            <see cref="M:MimeKit.MimeMessage.WriteTo(System.IO.Stream,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowMixedHeaderCharsets">
      <MemberSignature Language="C#" Value="public bool AllowMixedHeaderCharsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowMixedHeaderCharsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets whether the formatter should allow mixed charsets in the headers.
            </summary>
        <value>
          <c>true</c> if the formatter should be allowed to use ISO-8859-1 when encoding headers; otherwise, <c>false</c>.</value>
        <remarks>
          <para>When this option is enabled, the MIME formatter will try to use ISO-8859-1
            to encode headers when appropriate rather than being forced to use the specified
            charset for all encoded-word tokens in order to maximize readability.</para>
          <para>Unfortunately, mail clients like Outlook and Thunderbird do not treat
            encoded-word tokens individually and assume that all tokens are encoded using the
            charset declared in the first encoded-word token despite the specification
            explicitly stating that each encoded-word token should be treated independently.</para>
          <para>The Thunderbird bug can be tracked at https://bugzilla.mozilla.org/show_bug.cgi?id=317263</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public MimeKit.FormatOptions Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MimeKit.FormatOptions Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.FormatOptions</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clones an instance of <see cref="T:MimeKit.FormatOptions" />.
            </summary>
        <returns>An exact copy of the <see cref="T:MimeKit.FormatOptions" />.</returns>
        <remarks>
            Clones the formatting options.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static readonly MimeKit.FormatOptions Default;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class MimeKit.FormatOptions Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.FormatOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The default formatting options.
            </summary>
        <remarks>
            If a custom <see cref="T:MimeKit.FormatOptions" /> is not passed to methods such as
            <see cref="M:MimeKit.MimeMessage.WriteTo(MimeKit.FormatOptions,System.IO.Stream,System.Threading.CancellationToken)" />,
            the default options will be used.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HiddenHeaders">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.HashSet&lt;MimeKit.HeaderId&gt; HiddenHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.HashSet`1&lt;valuetype MimeKit.HeaderId&gt; HiddenHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;MimeKit.HeaderId&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the message headers that should be hidden.
            </summary>
        <value>The message headers.</value>
        <remarks>
          <para>Specifies the set of headers that should be removed when
            writing a <see cref="T:MimeKit.MimeMessage" /> to a stream.</para>
          <para>This is primarily meant for the purposes of removing Bcc
            and Resent-Bcc headers when sending via a transport such as
            SMTP.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="International">
      <MemberSignature Language="C#" Value="public bool International { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool International" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets whether the new "Internationalized Email" formatting standards should be used.
            </summary>
        <value>
          <c>true</c> if the new internationalized formatting should be used; otherwise, <c>false</c>.</value>
        <remarks>
          <para>The new "Internationalized Email" format is defined by rfc6530 and rfc6532.</para>
          <para>This feature should only be used when formatting messages meant to be sent via
            SMTP using the SMTPUTF8 extension (rfc6531) or when appending messages to an IMAP folder
            via UTF8 APPEND (rfc6855).</para>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="F:MimeKit.FormatOptions.Default" /> cannot be changed.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MaxLineLength">
      <MemberSignature Language="C#" Value="public int MaxLineLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLineLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the maximum line length used by the encoders. The encoders
            use this value to determine where to place line breaks.
            </summary>
        <value>The maximum line length.</value>
        <remarks>
            Specifies the maximum line length to use when line-wrapping headers.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineFormat">
      <MemberSignature Language="C#" Value="public MimeKit.NewLineFormat NewLineFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MimeKit.NewLineFormat NewLineFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.NewLineFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the new-line format.
            </summary>
        <value>The new-line format.</value>
        <remarks>
            Specifies the new-line encoding to use when writing the message
            or entity to a stream.
            </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="F:MimeKit.FormatOptions.Default" /> cannot be changed.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
