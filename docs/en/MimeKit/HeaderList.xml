<Type Name="HeaderList" FullName="MimeKit.HeaderList">
  <TypeSignature Language="C#" Value="public sealed class HeaderList : System.Collections.Generic.ICollection&lt;MimeKit.Header&gt;, System.Collections.Generic.IEnumerable&lt;MimeKit.Header&gt;, System.Collections.Generic.IList&lt;MimeKit.Header&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HeaderList extends System.Object implements class System.Collections.Generic.ICollection`1&lt;class MimeKit.Header&gt;, class System.Collections.Generic.IEnumerable`1&lt;class MimeKit.Header&gt;, class System.Collections.Generic.IList`1&lt;class MimeKit.Header&gt;, class System.Collections.IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>0.32.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;MimeKit.Header&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;MimeKit.Header&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;MimeKit.Header&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A list of <see cref="T:MimeKit.Header" />s.
            </summary>
    <remarks>
            Represents a list of headers as found in a <see cref="T:MimeKit.MimeMessage" />
            or <see cref="T:MimeKit.MimeEntity" />.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HeaderList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.HeaderList" /> class.
            </summary>
        <remarks>
            Creates a new empty header list.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (MimeKit.Header header);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class MimeKit.Header header) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="header" Type="MimeKit.Header" />
      </Parameters>
      <Docs>
        <param name="header">The header to add.</param>
        <summary>
            Adds the specified header.
            </summary>
        <remarks>
            Adds the specified header to the end of the header list.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="header" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (MimeKit.HeaderId id, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(valuetype MimeKit.HeaderId id, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="MimeKit.HeaderId" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The header identifier.</param>
        <param name="value">The header value.</param>
        <summary>
            Adds a header with the specified field and value.
            </summary>
        <remarks>
            Adds a new header for the specified field and value pair.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="id" /> is not a valid <see cref="T:MimeKit.HeaderId" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string field, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string field, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="field">The name of the header field.</param>
        <param name="value">The header value.</param>
        <summary>
            Adds a header with the specified field and value.
            </summary>
        <remarks>
            Adds a new header for the specified field and value pair.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="field" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="value" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
            The <paramref name="field" /> contains illegal characters.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clears the header list.
            </summary>
        <remarks>
            Removes all of the headers from the list.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (MimeKit.Header header);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class MimeKit.Header header) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="header" Type="MimeKit.Header" />
      </Parameters>
      <Docs>
        <param name="header">The header.</param>
        <summary>
            Checks if the <see cref="T:MimeKit.HeaderList" /> contains the specified header.
            </summary>
        <returns>
          <value>true</value> if the specified header is contained;
            otherwise <value>false</value>.</returns>
        <remarks>
            Determines whether or not the header list contains the specified header.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="header" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (MimeKit.HeaderId id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(valuetype MimeKit.HeaderId id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="MimeKit.HeaderId" />
      </Parameters>
      <Docs>
        <param name="id">The header identifier.</param>
        <summary>
            Checks if the <see cref="T:MimeKit.HeaderList" /> contains a header with the specified field name.
            </summary>
        <returns>
          <value>true</value> if the requested header exists;
            otherwise <value>false</value>.</returns>
        <remarks>
            Determines whether or not the header list contains the specified header.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="id" /> is not a valid <see cref="T:MimeKit.HeaderId" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string field) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="field">The name of the header field.</param>
        <summary>
            Checks if the <see cref="T:MimeKit.HeaderList" /> contains a header with the specified field name.
            </summary>
        <returns>
          <value>true</value> if the requested header exists;
            otherwise <value>false</value>.</returns>
        <remarks>
            Determines whether or not the header list contains the specified header.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="field" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (MimeKit.Header[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class MimeKit.Header[] array, int32 arrayIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="MimeKit.Header[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The array to copy the headers to.</param>
        <param name="arrayIndex">The index into the array.</param>
        <summary>
            Copies all of the headers in the <see cref="T:MimeKit.HeaderList" /> to the specified array.
            </summary>
        <remarks>
            Copies all of the headers within the <see cref="T:MimeKit.HeaderList" /> into the array,
            starting at the specified array index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="arrayIndex" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the number of headers in the <see cref="T:MimeKit.HeaderList" />.
            </summary>
        <value>The number of headers.</value>
        <remarks>
            Indicates the number of headers in the list.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;MimeKit.Header&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class MimeKit.Header&gt; GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;MimeKit.Header&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets an enumerator for the list of headers.
            </summary>
        <returns>The enumerator.</returns>
        <remarks>
            Gets an enumerator for the list of headers.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (MimeKit.Header header);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(class MimeKit.Header header) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="header" Type="MimeKit.Header" />
      </Parameters>
      <Docs>
        <param name="header">The header.</param>
        <summary>
            Gets the index of the requested header, if it exists.
            </summary>
        <returns>The index of the requested header; otherwise <value>-1</value>.</returns>
        <remarks>
            Finds the index of the specified header, if it exists.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="header" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (MimeKit.HeaderId id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(valuetype MimeKit.HeaderId id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="MimeKit.HeaderId" />
      </Parameters>
      <Docs>
        <param name="id">The header id.</param>
        <summary>
            Gets the index of the requested header, if it exists.
            </summary>
        <returns>The index of the requested header; otherwise <value>-1</value>.</returns>
        <remarks>
            Finds the first index of the specified header, if it exists.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="id" /> is not a valid <see cref="T:MimeKit.HeaderId" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string field) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="field">The name of the header field.</param>
        <summary>
            Gets the index of the requested header, if it exists.
            </summary>
        <returns>The index of the requested header; otherwise <value>-1</value>.</returns>
        <remarks>
            Finds the first index of the specified header, if it exists.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="field" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, MimeKit.Header header);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, class MimeKit.Header header) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="header" Type="MimeKit.Header" />
      </Parameters>
      <Docs>
        <param name="index">The index to insert the header.</param>
        <param name="header">The header.</param>
        <summary>
            Inserts the specified header at the given index.
            </summary>
        <remarks>
            Inserts the header at the specified index in the list.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="header" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, MimeKit.HeaderId id, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, valuetype MimeKit.HeaderId id, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="id" Type="MimeKit.HeaderId" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">The index to insert the header.</param>
        <param name="id">The header identifier.</param>
        <param name="value">The header value.</param>
        <summary>
            Inserts a header with the specified field and value at the given index.
            </summary>
        <remarks>
            Inserts the header at the specified index in the list.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <para>
            <paramref name="id" /> is not a valid <see cref="T:MimeKit.HeaderId" />.</para>
          <para>-or-</para>
          <para>
            <paramref name="index" /> is out of range.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, string field, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, string field, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="field" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">The index to insert the header.</param>
        <param name="field">The name of the header field.</param>
        <param name="value">The header value.</param>
        <summary>
            Inserts a header with the specified field and value at the given index.
            </summary>
        <remarks>
            Inserts the header at the specified index in the list.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="field" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="value" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
            The <paramref name="field" /> contains illegal characters.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
        <value>
          <c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        <remarks>
            A <see cref="T:MimeKit.HeaderList" /> is never read-only.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public string this[MimeKit.HeaderId id] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(valuetype MimeKit.HeaderId)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="MimeKit.HeaderId" />
      </Parameters>
      <Docs>
        <param name="id">The header identifier.</param>
        <summary>
            Gets or sets the value of the first occurance of a header
            with the specified field name.
            </summary>
        <value>The value of the first occurrance of the specified header if it exists; otherwise <c>null</c>.</value>
        <remarks>
            Gets or sets the value of the first occurance of a header
            with the specified field name.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public MimeKit.Header this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.Header Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Header</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index.</param>
        <summary>
            Gets or sets the <see cref="T:MimeKit.Header" /> at the specified index.
            </summary>
        <value>The header at the specified index.</value>
        <remarks>
            Gets or sets the <see cref="T:MimeKit.Header" /> at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public string this[string field] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="field">The name of the header field.</param>
        <summary>
            Gets or sets the value of the first occurance of a header
            with the specified field name.
            </summary>
        <value>The value of the first occurrance of the specified header if it exists; otherwise <c>null</c>.</value>
        <remarks>
            Gets or sets the value of the first occurance of a header
            with the specified field name.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="field" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="value" /> is <c>null</c>.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (MimeKit.Header header);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(class MimeKit.Header header) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="header" Type="MimeKit.Header" />
      </Parameters>
      <Docs>
        <param name="header">The header.</param>
        <summary>
            Removes the specified header.
            </summary>
        <returns>
          <c>true</c> if the specified header was removed;
            otherwise <c>false</c>.</returns>
        <remarks>
            Removes the specified header from the list if it exists.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="header" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (MimeKit.HeaderId id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(valuetype MimeKit.HeaderId id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="MimeKit.HeaderId" />
      </Parameters>
      <Docs>
        <param name="id">The header identifier.</param>
        <summary>
            Removes the first occurance of the specified header field.
            </summary>
        <returns>
          <value>true</value> if the first occurance of the specified
            header was removed; otherwise <value>false</value>.</returns>
        <remarks>
            Removes the first occurance of the specified header field, if any exist.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="id" /> is is not a valid <see cref="T:MimeKit.HeaderId" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (string field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(string field) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="field">The name of the header field.</param>
        <summary>
            Removes the first occurance of the specified header field.
            </summary>
        <returns>
          <value>true</value> if the first occurance of the specified
            header was removed; otherwise <value>false</value>.</returns>
        <remarks>
            Removes the first occurance of the specified header field, if any exist.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="field" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll (MimeKit.HeaderId id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll(valuetype MimeKit.HeaderId id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="MimeKit.HeaderId" />
      </Parameters>
      <Docs>
        <param name="id">The header identifier.</param>
        <summary>
            Removes all of the headers matching the specified field name.
            </summary>
        <remarks>
            Removes all of the headers matching the specified field name.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="id" /> is not a valid <see cref="T:MimeKit.HeaderId" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll (string field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll(string field) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="field">The name of the header field.</param>
        <summary>
            Removes all of the headers matching the specified field name.
            </summary>
        <remarks>
            Removes all of the headers matching the specified field name.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="field" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index.</param>
        <summary>
            Removes the header at the specified index.
            </summary>
        <remarks>
            Removes the header at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public void Replace (MimeKit.Header header);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Replace(class MimeKit.Header header) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="header" Type="MimeKit.Header" />
      </Parameters>
      <Docs>
        <param name="header">The header.</param>
        <summary>
            Replaces all headers with identical field names with the single specified header.
            </summary>
        <remarks>
          <para>Replaces all headers with identical field names with the single specified header.</para>
          <para>If no headers with the specified field name exist, it is simply added.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="header" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public void Replace (MimeKit.HeaderId id, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Replace(valuetype MimeKit.HeaderId id, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="MimeKit.HeaderId" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The header identifier.</param>
        <param name="value">The header value.</param>
        <summary>
            Replaces all headers with identical field names with the single specified header.
            </summary>
        <remarks>
          <para>Replaces all headers with identical field names with the single specified header.</para>
          <para>If no headers with the specified field name exist, it is simply added.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="id" /> is not a valid <see cref="T:MimeKit.HeaderId" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public void Replace (string field, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Replace(string field, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="field">The name of the header field.</param>
        <param name="value">The header value.</param>
        <summary>
            Replaces all headers with identical field names with the single specified header.
            </summary>
        <remarks>
          <para>Replaces all headers with identical field names with the single specified header.</para>
          <para>If no headers with the specified field name exist, it is simply added.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="field" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="value" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
            The <paramref name="field" /> contains illegal characters.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets an enumerator for the list of headers.
            </summary>
        <returns>The enumerator.</returns>
        <remarks>
            Gets an enumerator for the list of headers.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public void WriteTo (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteTo(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">The output stream.</param>
        <summary>
            Writes the <see cref="T:MimeKit.HeaderList" /> to the specified output stream.
            </summary>
        <remarks>
            Writes all of the headers to the output stream.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public void WriteTo (MimeKit.FormatOptions options, System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteTo(class MimeKit.FormatOptions options, class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.FormatOptions" />
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="options">The formatting options.</param>
        <param name="stream">The output stream.</param>
        <summary>
            Writes the <see cref="T:MimeKit.HeaderList" /> to the specified output stream.
            </summary>
        <remarks>
            Writes all of the headers to the output stream.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="stream" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public void WriteTo (System.IO.Stream stream, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteTo(class System.IO.Stream stream, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">The output stream.</param>
        <param name="cancellationToken">A cancellation token.</param>
        <summary>
            Writes the <see cref="T:MimeKit.HeaderList" /> to the specified output stream.
            </summary>
        <remarks>
            Writes all of the headers to the output stream.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public void WriteTo (MimeKit.FormatOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteTo(class MimeKit.FormatOptions options, class System.IO.Stream stream, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.FormatOptions" />
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">The formatting options.</param>
        <param name="stream">The output stream.</param>
        <param name="cancellationToken">A cancellation token.</param>
        <summary>
            Writes the <see cref="T:MimeKit.HeaderList" /> to the specified output stream.
            </summary>
        <remarks>
            Writes all of the headers to the output stream.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="stream" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
