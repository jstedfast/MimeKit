<Type Name="MimeMessage" FullName="MimeKit.MimeMessage">
  <TypeSignature Language="C#" Value="public class MimeMessage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MimeMessage extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>0.32.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A MIME message.
            </summary>
    <remarks>
      <para>A message consists of header fields and, optionally, a body.</para>
      <para>The body of the message can either be plain text or it can be a
            tree of MIME entities such as a text/plain MIME part and a collection
            of file attachments.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MimeMessage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimeMessage" /> class.
            </summary>
        <remarks>
            Creates a new MIME message.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MimeMessage (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object[] args) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args">An array of initialization parameters: headers and message parts.</param>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.MimeMessage" /> class.
            </summary>
        <remarks>
            Creates a new <see cref="T:MimeKit.MimeMessage" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="args" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="args" /> contains more than one <see cref="T:MimeKit.MimeEntity" />.</para>
          <para>-or-</para>
          <para>
            <paramref name="args" /> contains one or more arguments of an unknown type.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Attachments">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;MimeKit.MimePart&gt; Attachments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class MimeKit.MimePart&gt; Attachments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;MimeKit.MimePart&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the attachments.
            </summary>
        <value>The attachments.</value>
        <remarks>
            Traverses over the MIME tree, enumerating all of the <see cref="T:MimeKit.MimePart" /> objects that
            have a Content-Disposition header set to <c>"attachment"</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bcc">
      <MemberSignature Language="C#" Value="public MimeKit.InternetAddressList Bcc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.InternetAddressList Bcc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of addresses in the Bcc header.
            </summary>
        <value>The list of addresses in the Bcc header.</value>
        <remarks>
            Recipients in the Blind-Carpbon-Copy list will not be visible to
            the other recipients of the message.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public MimeKit.MimeEntity Body { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.MimeEntity Body" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeEntity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the body of the message.
            </summary>
        <value>The body of the message.</value>
        <remarks>
          <para>The body of the message can either be plain text or it can be a
            tree of MIME entities such as a text/plain MIME part and a collection
            of file attachments.</para>
          <para>For a convenient way of constructing message bodies, see the
            <see cref="T:MimeKit.BodyBuilder" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BodyParts">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;MimeKit.MimePart&gt; BodyParts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class MimeKit.MimePart&gt; BodyParts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;MimeKit.MimePart&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the body parts of the message.
            </summary>
        <value>The body parts.</value>
        <remarks>
            Traverses over the MIME tree, enumerating all  of the <see cref="T:MimeKit.MimePart" /> objects.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cc">
      <MemberSignature Language="C#" Value="public MimeKit.InternetAddressList Cc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.InternetAddressList Cc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of addresses in the Cc header.
            </summary>
        <value>The list of addresses in the Cc header.</value>
        <remarks>
            The addresses in the Cc header are secondary recipients of the message
            and are usually not the individuals being directly addressed in the
            content of the message.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromMailMessage">
      <MemberSignature Language="C#" Value="public static MimeKit.MimeMessage CreateFromMailMessage (System.Net.Mail.MailMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.MimeMessage CreateFromMailMessage(class System.Net.Mail.MailMessage message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
      </Parameters>
      <Docs>
        <param name="message">The message.</param>
        <summary>
            Creates a new <see cref="T:MimeKit.MimeMessage" /> from a <see cref="T:System.Net.Mail.MailMessage" />.
            </summary>
        <returns>The equivalent <see cref="T:MimeKit.MimeMessage" />.</returns>
        <remarks>
            Creates a new <see cref="T:MimeKit.MimeMessage" /> from a <see cref="T:System.Net.Mail.MailMessage" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTimeOffset Date { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeOffset Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the date of the message.
            </summary>
        <value>The date of the message.</value>
        <remarks>
            If the date is not explicitly set before the message is written to a stream,
            the date will default to the exact moment when it is written to said stream.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public void Encrypt (MimeKit.Cryptography.CryptographyContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Encrypt(class MimeKit.Cryptography.CryptographyContext ctx) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="MimeKit.Cryptography.CryptographyContext" />
      </Parameters>
      <Docs>
        <param name="ctx">The cryptography context.</param>
        <summary>
            Encrypt the message to the sender and all of the recipients
            using the specified cryptography context.
            </summary>
        <remarks>
            If either of the Resent-Sender or Resent-From headers are set, then the message
            will be encrypted to all of the addresses specified in the Resent headers
            (Resent-Sender, Resent-From, Resent-To, Resent-Cc, and Resent-Bcc),
            otherwise the message will be encrypted to all of the addresses specified in
            the standard address headers (Sender, From, To, Cc, and Bcc).
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ctx" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentException">
            An unknown type of cryptography context was used.
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <para>The <see cref="P:MimeKit.MimeMessage.Body" /> has not been set.</para>
          <para>-or-</para>
          <para>No recipients have been specified.</para>
        </exception>
        <exception cref="T:MimeKit.Cryptography.CertificateNotFoundException">
            A certificate could not be found for one or more of the recipients.
            </exception>
        <exception cref="T:MimeKit.Cryptography.PublicKeyNotFoundException">
            The public key could not be found for one or more of the recipients.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public MimeKit.InternetAddressList From { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.InternetAddressList From" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of addresses in the From header.
            </summary>
        <value>The list of addresses in the From header.</value>
        <remarks>
          <para>The "From" header specifies the author(s) of the message.</para>
          <para>If more than one <see cref="T:MimeKit.MailboxAddress" /> is added to the
            list of "From" addresses, the <see cref="P:MimeKit.MimeMessage.Sender" /> should be set to the
            single <see cref="T:MimeKit.MailboxAddress" /> of the personal actually sending
            the message.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public MimeKit.HeaderList Headers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.HeaderList Headers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.HeaderList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of headers.
            </summary>
        <value>The list of headers.</value>
        <remarks>
            Represents the list of headers for a message. Typically, the headers of
            a message will contain transmission headers such as From and To along
            with metadata headers such as Subject and Date, but may include just
            about anything.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InReplyTo">
      <MemberSignature Language="C#" Value="public string InReplyTo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InReplyTo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the Message-Id that this message is in reply to.
            </summary>
        <value>The message id that this message is in reply to.</value>
        <remarks>
            If the message is a reply to another message, it will typically
            use the In-Reply-To header to specify the Message-Id of the
            original message being replied to.
            </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is improperly formatted.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static MimeKit.MimeMessage Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.MimeMessage Load(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">The stream.</param>
        <summary>
            Load a <see cref="T:MimeKit.MimeMessage" /> from the specified stream.
            </summary>
        <returns>The parsed message.</returns>
        <remarks>
            Loads a <see cref="T:MimeKit.MimeMessage" /> from the given stream, using the
            default <see cref="T:MimeKit.ParserOptions" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static MimeKit.MimeMessage Load (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.MimeMessage Load(string fileName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the file to load.</param>
        <summary>
            Load a <see cref="T:MimeKit.MimeMessage" /> from the specified file.
            </summary>
        <returns>The parsed message.</returns>
        <remarks>
            Loads a <see cref="T:MimeKit.MimeMessage" /> from the file at the given path, using the
            default <see cref="T:MimeKit.ParserOptions" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentException">
            The specified file path is empty.
            </exception>
        <exception cref="T:System.IO.FileNotFoundException">
            The specified file could not be found.
            </exception>
        <exception cref="T:System.UnauthorizedAccessException">
            The user does not have access to read the specified file.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static MimeKit.MimeMessage Load (MimeKit.ParserOptions options, System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.MimeMessage Load(class MimeKit.ParserOptions options, class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="options">The parser options.</param>
        <param name="stream">The stream.</param>
        <summary>
            Load a <see cref="T:MimeKit.MimeMessage" /> from the specified stream.
            </summary>
        <returns>The parsed message.</returns>
        <remarks>
            Loads a <see cref="T:MimeKit.MimeMessage" /> from the given stream, using the
            specified <see cref="T:MimeKit.ParserOptions" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="stream" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static MimeKit.MimeMessage Load (MimeKit.ParserOptions options, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.MimeMessage Load(class MimeKit.ParserOptions options, string fileName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="options">The parser options.</param>
        <param name="fileName">The name of the file to load.</param>
        <summary>
            Load a <see cref="T:MimeKit.MimeMessage" /> from the specified file.
            </summary>
        <returns>The parsed message.</returns>
        <remarks>
            Loads a <see cref="T:MimeKit.MimeMessage" /> from the file at the given path, using the
            specified <see cref="T:MimeKit.ParserOptions" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="fileName" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
            The specified file path is empty.
            </exception>
        <exception cref="T:System.IO.FileNotFoundException">
            The specified file could not be found.
            </exception>
        <exception cref="T:System.UnauthorizedAccessException">
            The user does not have access to read the specified file.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static MimeKit.MimeMessage Load (System.IO.Stream stream, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.MimeMessage Load(class System.IO.Stream stream, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">The stream.</param>
        <param name="cancellationToken">A cancellation token.</param>
        <summary>
            Load a <see cref="T:MimeKit.MimeMessage" /> from the specified stream.
            </summary>
        <returns>The parsed message.</returns>
        <remarks>
            Loads a <see cref="T:MimeKit.MimeMessage" /> from the given stream, using the
            default <see cref="T:MimeKit.ParserOptions" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static MimeKit.MimeMessage Load (string fileName, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.MimeMessage Load(string fileName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the file to load.</param>
        <param name="cancellationToken">A cancellation token.</param>
        <summary>
            Load a <see cref="T:MimeKit.MimeMessage" /> from the specified file.
            </summary>
        <returns>The parsed message.</returns>
        <remarks>
            Loads a <see cref="T:MimeKit.MimeMessage" /> from the file at the given path, using the
            default <see cref="T:MimeKit.ParserOptions" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentException">
            The specified file path is empty.
            </exception>
        <exception cref="T:System.IO.FileNotFoundException">
            The specified file could not be found.
            </exception>
        <exception cref="T:System.UnauthorizedAccessException">
            The user does not have access to read the specified file.
            </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static MimeKit.MimeMessage Load (MimeKit.ParserOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.MimeMessage Load(class MimeKit.ParserOptions options, class System.IO.Stream stream, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">The parser options.</param>
        <param name="stream">The stream.</param>
        <param name="cancellationToken">A cancellation token.</param>
        <summary>
            Load a <see cref="T:MimeKit.MimeMessage" /> from the specified stream.
            </summary>
        <returns>The parsed message.</returns>
        <remarks>
            Loads a <see cref="T:MimeKit.MimeMessage" /> from the given stream, using the
            specified <see cref="T:MimeKit.ParserOptions" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="stream" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static MimeKit.MimeMessage Load (MimeKit.ParserOptions options, string fileName, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.MimeMessage Load(class MimeKit.ParserOptions options, string fileName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.ParserOptions" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">The parser options.</param>
        <param name="fileName">The name of the file to load.</param>
        <param name="cancellationToken">A cancellation token.</param>
        <summary>
            Load a <see cref="T:MimeKit.MimeMessage" /> from the specified file.
            </summary>
        <returns>The parsed message.</returns>
        <remarks>
            Loads a <see cref="T:MimeKit.MimeMessage" /> from the file at the given path, using the
            specified <see cref="T:MimeKit.ParserOptions" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="fileName" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
            The specified file path is empty.
            </exception>
        <exception cref="T:System.IO.FileNotFoundException">
            The specified file could not be found.
            </exception>
        <exception cref="T:System.UnauthorizedAccessException">
            The user does not have access to read the specified file.
            </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        <exception cref="T:System.FormatException">
            There was an error parsing the entity.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MessageId">
      <MemberSignature Language="C#" Value="public string MessageId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the message identifier.
            </summary>
        <value>The message identifier.</value>
        <remarks>
          <para>The Message-Id is meant to be a globally unique identifier for
            a message.</para>
          <para>
            <see cref="M:MimeKit.Utils.MimeUtils.GenerateMessageId" /> can be used
            to generate this value.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is improperly formatted.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MimeVersion">
      <MemberSignature Language="C#" Value="public Version MimeVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version MimeVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the MIME-Version.
            </summary>
        <value>The MIME version.</value>
        <remarks>
            The MIME-Version header specifies the version of the MIME specification
            that the message was created for.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static MimeKit.MimeMessage op_Explicit (System.Net.Mail.MailMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class MimeKit.MimeMessage op_Explicit(class System.Net.Mail.MailMessage message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
      </Parameters>
      <Docs>
        <param name="message">The message.</param>
        <summary>
            Explicit cast to convert a <see cref="T:System.Net.Mail.MailMessage" /> to a
            <see cref="T:MimeKit.MimeMessage" />.
            </summary>
        <returns>The equivalent <see cref="T:MimeKit.MimeMessage" />.</returns>
        <remarks>
            Allows creation of messages using Microsoft's System.Net.Mail APIs.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="References">
      <MemberSignature Language="C#" Value="public MimeKit.MessageIdList References { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.MessageIdList References" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MessageIdList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the list of references to other messages.
            </summary>
        <value>The references.</value>
        <remarks>
            The References header contains a chain of Message-Ids back to the
            original message that started the thread.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplyTo">
      <MemberSignature Language="C#" Value="public MimeKit.InternetAddressList ReplyTo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.InternetAddressList ReplyTo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of addresses in the Reply-To header.
            </summary>
        <value>The list of addresses in the Reply-To header.</value>
        <remarks>
          <para>When the list of addresses in the Reply-To header is not empty,
            it contains the address(es) where the author(s) of the message prefer
            that replies be sent.</para>
          <para>When the list of addresses in the Reply-To header is empty,
            replies should be sent to the mailbox(es) specified in the From
            header.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResentBcc">
      <MemberSignature Language="C#" Value="public MimeKit.InternetAddressList ResentBcc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.InternetAddressList ResentBcc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of addresses in the Resent-Bcc header.
            </summary>
        <value>The list of addresses in the Resent-Bcc header.</value>
        <remarks>
            Recipients in the Resent-Bcc list will not be visible to
            the other recipients of the message.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResentCc">
      <MemberSignature Language="C#" Value="public MimeKit.InternetAddressList ResentCc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.InternetAddressList ResentCc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of addresses in the Resent-Cc header.
            </summary>
        <value>The list of addresses in the Resent-Cc header.</value>
        <remarks>
            The addresses in the Resent-Cc header are secondary recipients of the message
            and are usually not the individuals being directly addressed in the
            content of the message.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResentDate">
      <MemberSignature Language="C#" Value="public DateTimeOffset ResentDate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeOffset ResentDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the Resent-Date of the message.
            </summary>
        <value>The Resent-Date of the message.</value>
        <remarks>
            Gets or sets the Resent-Date of the message.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResentFrom">
      <MemberSignature Language="C#" Value="public MimeKit.InternetAddressList ResentFrom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.InternetAddressList ResentFrom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of addresses in the Resent-From header.
            </summary>
        <value>The list of addresses in the Resent-From header.</value>
        <remarks>
          <para>The "Resent-From" header specifies the author(s) of the messagebeing
            resent.</para>
          <para>If more than one <see cref="T:MimeKit.MailboxAddress" /> is added to the
            list of "Resent-From" addresses, the <see cref="P:MimeKit.MimeMessage.ResentSender" /> should
            be set to the single <see cref="T:MimeKit.MailboxAddress" /> of the personal actually
            sending the message.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResentMessageId">
      <MemberSignature Language="C#" Value="public string ResentMessageId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ResentMessageId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the Resent-Message-Id header.
            </summary>
        <value>The Resent-Message-Id.</value>
        <remarks>
          <para>The Resent-Message-Id is meant to be a globally unique identifier for
            a message.</para>
          <para>
            <see cref="M:MimeKit.Utils.MimeUtils.GenerateMessageId" /> can be used
            to generate this value.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is improperly formatted.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ResentReplyTo">
      <MemberSignature Language="C#" Value="public MimeKit.InternetAddressList ResentReplyTo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.InternetAddressList ResentReplyTo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of addresses in the Resent-Reply-To header.
            </summary>
        <value>The list of addresses in the Resent-Reply-To header.</value>
        <remarks>
          <para>When the list of addresses in the Resent-Reply-To header is not empty,
            it contains the address(es) where the author(s) of the resent message prefer
            that replies be sent.</para>
          <para>When the list of addresses in the Resent-Reply-To header is empty,
            replies should be sent to the mailbox(es) specified in the Resent-From
            header.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResentSender">
      <MemberSignature Language="C#" Value="public MimeKit.MailboxAddress ResentSender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.MailboxAddress ResentSender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MailboxAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the address in the Resent-Sender header.
            </summary>
        <value>The address in the Resent-Sender header.</value>
        <remarks>
            The resent sender may differ from the addresses in <see cref="P:MimeKit.MimeMessage.ResentFrom" /> if
            the message was sent by someone on behalf of someone else.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResentTo">
      <MemberSignature Language="C#" Value="public MimeKit.InternetAddressList ResentTo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.InternetAddressList ResentTo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of addresses in the Resent-To header.
            </summary>
        <value>The list of addresses in the Resent-To header.</value>
        <remarks>
            The addresses in the Resent-To header are the primary recipients of
            the message.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sender">
      <MemberSignature Language="C#" Value="public MimeKit.MailboxAddress Sender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.MailboxAddress Sender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MailboxAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the address in the Sender header.
            </summary>
        <value>The address in the Sender header.</value>
        <remarks>
            The sender may differ from the addresses in <see cref="P:MimeKit.MimeMessage.From" /> if
            the message was sent by someone on behalf of someone else.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public void Sign (MimeKit.Cryptography.CryptographyContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sign(class MimeKit.Cryptography.CryptographyContext ctx) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="MimeKit.Cryptography.CryptographyContext" />
      </Parameters>
      <Docs>
        <param name="ctx">The cryptography context.</param>
        <summary>
            Sign the message using the specified cryptography context and the SHA-1 digest algorithm.
            </summary>
        <remarks>
            If either of the Resent-Sender or Resent-From headers are set, then the message
            will be signed using the Resent-Sender (or first mailbox in the Resent-From)
            address as the signer address, otherwise the Sender or From address will be
            used instead.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ctx" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <para>The <see cref="P:MimeKit.MimeMessage.Body" /> has not been set.</para>
          <para>-or-</para>
          <para>A sender has not been specified.</para>
        </exception>
        <exception cref="T:MimeKit.Cryptography.CertificateNotFoundException">
            A signing certificate could not be found for the sender.
            </exception>
        <exception cref="T:MimeKit.Cryptography.PrivateKeyNotFoundException">
            The private key could not be found for the sender.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public void Sign (MimeKit.Cryptography.CryptographyContext ctx, MimeKit.Cryptography.DigestAlgorithm digestAlgo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sign(class MimeKit.Cryptography.CryptographyContext ctx, valuetype MimeKit.Cryptography.DigestAlgorithm digestAlgo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="MimeKit.Cryptography.CryptographyContext" />
        <Parameter Name="digestAlgo" Type="MimeKit.Cryptography.DigestAlgorithm" />
      </Parameters>
      <Docs>
        <param name="ctx">The cryptography context.</param>
        <param name="digestAlgo">The digest algorithm.</param>
        <summary>
            Sign the message using the specified cryptography context and digest algorithm.
            </summary>
        <remarks>
            If either of the Resent-Sender or Resent-From headers are set, then the message
            will be signed using the Resent-Sender (or first mailbox in the Resent-From)
            address as the signer address, otherwise the Sender or From address will be
            used instead.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ctx" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <para>The <see cref="P:MimeKit.MimeMessage.Body" /> has not been set.</para>
          <para>-or-</para>
          <para>A sender has not been specified.</para>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="digestAlgo" /> was out of range.
            </exception>
        <exception cref="T:System.NotSupportedException">
            The <paramref name="digestAlgo" /> is not supported.
            </exception>
        <exception cref="T:MimeKit.Cryptography.CertificateNotFoundException">
            A signing certificate could not be found for the sender.
            </exception>
        <exception cref="T:MimeKit.Cryptography.PrivateKeyNotFoundException">
            The private key could not be found for the sender.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SignAndEncrypt">
      <MemberSignature Language="C#" Value="public void SignAndEncrypt (MimeKit.Cryptography.CryptographyContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignAndEncrypt(class MimeKit.Cryptography.CryptographyContext ctx) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="MimeKit.Cryptography.CryptographyContext" />
      </Parameters>
      <Docs>
        <param name="ctx">The cryptography context.</param>
        <summary>
            Sign and encrypt the message to the sender and all of the recipients using
            the specified cryptography context and the SHA-1 digest algorithm.
            </summary>
        <remarks>
          <para>If either of the Resent-Sender or Resent-From headers are set, then the message
            will be signed using the Resent-Sender (or first mailbox in the Resent-From)
            address as the signer address, otherwise the Sender or From address will be
            used instead.</para>
          <para>Likewise, if either of the Resent-Sender or Resent-From headers are set, then the
            message will be encrypted to all of the addresses specified in the Resent headers
            (Resent-Sender, Resent-From, Resent-To, Resent-Cc, and Resent-Bcc),
            otherwise the message will be encrypted to all of the addresses specified in
            the standard address headers (Sender, From, To, Cc, and Bcc).</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ctx" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentException">
            An unknown type of cryptography context was used.
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <para>The <see cref="P:MimeKit.MimeMessage.Body" /> has not been set.</para>
          <para>-or-</para>
          <para>The sender has been specified.</para>
          <para>-or-</para>
          <para>No recipients have been specified.</para>
        </exception>
        <exception cref="T:MimeKit.Cryptography.CertificateNotFoundException">
            A certificate could not be found for the signer or one or more of the recipients.
            </exception>
        <exception cref="T:MimeKit.Cryptography.PrivateKeyNotFoundException">
            The private key could not be found for the sender.
            </exception>
        <exception cref="T:MimeKit.Cryptography.PublicKeyNotFoundException">
            The public key could not be found for one or more of the recipients.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SignAndEncrypt">
      <MemberSignature Language="C#" Value="public void SignAndEncrypt (MimeKit.Cryptography.CryptographyContext ctx, MimeKit.Cryptography.DigestAlgorithm digestAlgo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SignAndEncrypt(class MimeKit.Cryptography.CryptographyContext ctx, valuetype MimeKit.Cryptography.DigestAlgorithm digestAlgo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="MimeKit.Cryptography.CryptographyContext" />
        <Parameter Name="digestAlgo" Type="MimeKit.Cryptography.DigestAlgorithm" />
      </Parameters>
      <Docs>
        <param name="ctx">The cryptography context.</param>
        <param name="digestAlgo">The digest algorithm.</param>
        <summary>
            Sign and encrypt the message to the sender and all of the recipients using
            the specified cryptography context and the specified digest algorithm.
            </summary>
        <remarks>
          <para>If either of the Resent-Sender or Resent-From headers are set, then the message
            will be signed using the Resent-Sender (or first mailbox in the Resent-From)
            address as the signer address, otherwise the Sender or From address will be
            used instead.</para>
          <para>Likewise, if either of the Resent-Sender or Resent-From headers are set, then the
            message will be encrypted to all of the addresses specified in the Resent headers
            (Resent-Sender, Resent-From, Resent-To, Resent-Cc, and Resent-Bcc),
            otherwise the message will be encrypted to all of the addresses specified in
            the standard address headers (Sender, From, To, Cc, and Bcc).</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ctx" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentException">
            An unknown type of cryptography context was used.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="digestAlgo" /> was out of range.
            </exception>
        <exception cref="T:System.InvalidOperationException">
          <para>The <see cref="P:MimeKit.MimeMessage.Body" /> has not been set.</para>
          <para>-or-</para>
          <para>The sender has been specified.</para>
          <para>-or-</para>
          <para>No recipients have been specified.</para>
        </exception>
        <exception cref="T:System.NotSupportedException">
            The <paramref name="digestAlgo" /> is not supported.
            </exception>
        <exception cref="T:MimeKit.Cryptography.CertificateNotFoundException">
            A certificate could not be found for the signer or one or more of the recipients.
            </exception>
        <exception cref="T:MimeKit.Cryptography.PrivateKeyNotFoundException">
            The private key could not be found for the sender.
            </exception>
        <exception cref="T:MimeKit.Cryptography.PublicKeyNotFoundException">
            The public key could not be found for one or more of the recipients.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Subject">
      <MemberSignature Language="C#" Value="public string Subject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Subject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the subject of the message.
            </summary>
        <value>The subject of the message.</value>
        <remarks>
          <para>The Subject is typically a short string denoting the topic of the message.</para>
          <para>Replies will often use <c>"Re: "</c> followed by the Subject of the original message.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="To">
      <MemberSignature Language="C#" Value="public MimeKit.InternetAddressList To { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.InternetAddressList To" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.InternetAddressList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of addresses in the To header.
            </summary>
        <value>The list of addresses in the To header.</value>
        <remarks>
            The addresses in the To header are the primary recipients of
            the message.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public void WriteTo (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteTo(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">The output stream.</param>
        <summary>
            Writes the message to the specified output stream.
            </summary>
        <remarks>
            Writes the message to the output stream using the default formatting options.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public void WriteTo (MimeKit.FormatOptions options, System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteTo(class MimeKit.FormatOptions options, class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.FormatOptions" />
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="options">The formatting options.</param>
        <param name="stream">The output stream.</param>
        <summary>
            Writes the message to the specified output stream.
            </summary>
        <remarks>
            Writes the message to the output stream using the provided formatting options.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="stream" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public void WriteTo (System.IO.Stream stream, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteTo(class System.IO.Stream stream, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">The output stream.</param>
        <param name="cancellationToken">A cancellation token.</param>
        <summary>
            Writes the message to the specified output stream.
            </summary>
        <remarks>
            Writes the message to the output stream using the default formatting options.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public void WriteTo (MimeKit.FormatOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteTo(class MimeKit.FormatOptions options, class System.IO.Stream stream, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MimeKit.FormatOptions" />
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">The formatting options.</param>
        <param name="stream">The output stream.</param>
        <param name="cancellationToken">A cancellation token.</param>
        <summary>
            Writes the message to the specified output stream.
            </summary>
        <remarks>
            Writes the message to the output stream using the provided formatting options.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="options" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="stream" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
