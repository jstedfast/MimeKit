<Type Name="AttachmentCollection" FullName="MimeKit.AttachmentCollection">
  <TypeSignature Language="C#" Value="public class AttachmentCollection : System.Collections.Generic.ICollection&lt;MimeKit.MimeEntity&gt;, System.Collections.Generic.IEnumerable&lt;MimeKit.MimeEntity&gt;, System.Collections.Generic.IList&lt;MimeKit.MimeEntity&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AttachmentCollection extends System.Object implements class System.Collections.Generic.ICollection`1&lt;class MimeKit.MimeEntity&gt;, class System.Collections.Generic.IEnumerable`1&lt;class MimeKit.MimeEntity&gt;, class System.Collections.Generic.IList`1&lt;class MimeKit.MimeEntity&gt;, class System.Collections.IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;MimeKit.MimeEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;MimeKit.MimeEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;MimeKit.MimeEntity&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A collection of attachments.
            </summary>
    <remarks>
            The <see cref="T:MimeKit.AttachmentCollection" /> is only used when building a message body with a <see cref="T:MimeKit.BodyBuilder" />.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AttachmentCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.AttachmentCollection" /> class.
            </summary>
        <remarks>
            Creates a new <see cref="T:MimeKit.AttachmentCollection" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AttachmentCollection (bool linkedResources);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool linkedResources) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="linkedResources" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="linkedResources">If set to <c>true</c>; the attachments are treated as linked resources.</param>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.AttachmentCollection" /> class.
            </summary>
        <remarks>
          <para>Creates a new <see cref="T:MimeKit.AttachmentCollection" />.</para>
          <para>If <paramref name="linkedResources" /> is <c>true</c>, then the attachments
            are treated as if they are linked to another <see cref="T:MimeKit.MimePart" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (MimeKit.MimeEntity attachment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class MimeKit.MimeEntity attachment) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachment" Type="MimeKit.MimeEntity" />
      </Parameters>
      <Docs>
        <param name="attachment">The attachment.</param>
        <summary>
            Add the specified attachment.
            </summary>
        <remarks>
            Adds the specified <see cref="T:MimeKit.MimePart" /> as an attachment.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attachment" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MimeKit.MimeEntity Add (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MimeKit.MimeEntity Add(string fileName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the file.</param>
        <summary>
            Add the specified attachment.
            </summary>
        <returns>The newly added attachment <see cref="T:MimeKit.MimeEntity" />.</returns>
        <remarks>
          <para>Adds the specified file as an attachment.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileName" /> is a zero-length string, contains only white space, or
            contains one or more invalid characters as defined by
            <see cref="F:System.IO.Path.InvalidPathChars" />.
            </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="fileName" /> is an invalid file path.
            </exception>
        <exception cref="T:System.IO.FileNotFoundException">
            The specified file path could not be found.
            </exception>
        <exception cref="T:System.UnauthorizedAccessException">
            The user does not have access to read the specified file.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MimeKit.MimeEntity Add (string fileName, MimeKit.ContentType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MimeKit.MimeEntity Add(string fileName, class MimeKit.ContentType contentType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="contentType" Type="MimeKit.ContentType" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the file.</param>
        <param name="contentType">The mime-type of the file.</param>
        <summary>
            Add the specified attachment.
            </summary>
        <returns>The newly added attachment <see cref="T:MimeKit.MimeEntity" />.</returns>
        <remarks>
          <para>Adds the specified file as an attachment using the supplied Content-Type.</para>
          <para>For a list of known mime-types and their associated file extensions, see
            http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="fileName" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="contentType" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
            The specified file path is empty.
            </exception>
        <exception cref="T:System.IO.FileNotFoundException">
            The specified file could not be found.
            </exception>
        <exception cref="T:System.UnauthorizedAccessException">
            The user does not have access to read the specified file.
            </exception>
        <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MimeKit.MimeEntity Add (string fileName, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MimeKit.MimeEntity Add(string fileName, unsigned int8[] data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the file.</param>
        <param name="data">The file data to attach.</param>
        <summary>
            Add the specified attachment.
            </summary>
        <returns>The newly added attachment <see cref="T:MimeKit.MimeEntity" />.</returns>
        <remarks>
          <para>Adds the data as an attachment, using the specified file name for deducing
            the mime-type by extension and for setting the Content-Location.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="fileName" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="data" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
            The specified file path is empty.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MimeKit.MimeEntity Add (string fileName, System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MimeKit.MimeEntity Add(string fileName, class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the file.</param>
        <param name="stream">The content stream.</param>
        <summary>
            Add the specified attachment.
            </summary>
        <returns>The newly added attachment <see cref="T:MimeKit.MimeEntity" />.</returns>
        <remarks>
          <para>Adds the stream as an attachment, using the specified file name for deducing
            the mime-type by extension and for setting the Content-Location.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="fileName" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="stream" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>The specified file path is empty.</para>
          <para>-or-</para>
          <para>The stream cannot be read</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MimeKit.MimeEntity Add (string fileName, byte[] data, MimeKit.ContentType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MimeKit.MimeEntity Add(string fileName, unsigned int8[] data, class MimeKit.ContentType contentType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="contentType" Type="MimeKit.ContentType" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the file.</param>
        <param name="data">The file data.</param>
        <param name="contentType">The mime-type of the file.</param>
        <summary>
            Add the specified attachment.
            </summary>
        <returns>The newly added attachment <see cref="T:MimeKit.MimeEntity" />.</returns>
        <remarks>
          <para>Adds the specified data as an attachment using the supplied Content-Type.</para>
          <para>The file name parameter is used to set the Content-Location.</para>
          <para>For a list of known mime-types and their associated file extensions, see
            http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="fileName" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="data" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="contentType" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
            The specified file path is empty.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public MimeKit.MimeEntity Add (string fileName, System.IO.Stream stream, MimeKit.ContentType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MimeKit.MimeEntity Add(string fileName, class System.IO.Stream stream, class MimeKit.ContentType contentType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="contentType" Type="MimeKit.ContentType" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the file.</param>
        <param name="stream">The content stream.</param>
        <param name="contentType">The mime-type of the file.</param>
        <summary>
            Add the specified attachment.
            </summary>
        <returns>The newly added attachment <see cref="T:MimeKit.MimeEntity" />.</returns>
        <remarks>
          <para>Adds the specified data as an attachment using the supplied Content-Type.</para>
          <para>The file name parameter is used to set the Content-Location.</para>
          <para>For a list of known mime-types and their associated file extensions, see
            http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="fileName" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="stream" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="contentType" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>The specified file path is empty.</para>
          <para>-or-</para>
          <para>The stream cannot be read.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clears the attachment collection.
            </summary>
        <remarks>
            Removes all attachments from the collection.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (MimeKit.MimeEntity attachment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class MimeKit.MimeEntity attachment) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachment" Type="MimeKit.MimeEntity" />
      </Parameters>
      <Docs>
        <param name="attachment">The attachment.</param>
        <summary>
            Checks if the collection contains the specified attachment.
            </summary>
        <returns>
          <value>true</value> if the specified attachment exists;
            otherwise <value>false</value>.</returns>
        <remarks>
            Determines whether or not the collection contains the specified attachment.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attachment" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (MimeKit.MimeEntity[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class MimeKit.MimeEntity[] array, int32 arrayIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="MimeKit.MimeEntity[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The array to copy the attachments to.</param>
        <param name="arrayIndex">The index into the array.</param>
        <summary>
            Copies all of the attachments in the collection to the specified array.
            </summary>
        <remarks>
            Copies all of the attachments within the <see cref="T:MimeKit.AttachmentCollection" /> into the array,
            starting at the specified array index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="arrayIndex" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the number of attachments currently in the collection.
            </summary>
        <value>The number of attachments.</value>
        <remarks>
            Indicates the number of attachments in the collection.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;MimeKit.MimeEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class MimeKit.MimeEntity&gt; GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;MimeKit.MimeEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets an enumerator for the list of attachments.
            </summary>
        <returns>The enumerator.</returns>
        <remarks>
            Gets an enumerator for the list of attachments.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (MimeKit.MimeEntity attachment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(class MimeKit.MimeEntity attachment) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachment" Type="MimeKit.MimeEntity" />
      </Parameters>
      <Docs>
        <param name="attachment">The attachment.</param>
        <summary>
            Gets the index of the requested attachment, if it exists.
            </summary>
        <returns>The index of the requested attachment; otherwise <value>-1</value>.</returns>
        <remarks>
            Finds the index of the specified attachment, if it exists.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attachment" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, MimeKit.MimeEntity attachment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, class MimeKit.MimeEntity attachment) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="attachment" Type="MimeKit.MimeEntity" />
      </Parameters>
      <Docs>
        <param name="index">The index to insert the attachment.</param>
        <param name="attachment">The attachment.</param>
        <summary>
            Inserts the specified attachment at the given index.
            </summary>
        <remarks>
            Inserts the attachment at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attachment" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets whther or not the collection is read-only.
            </summary>
        <value>
          <c>true</c> if the collection is read only; otherwise, <c>false</c>.</value>
        <remarks>
            A <see cref="T:MimeKit.AttachmentCollection" /> is never read-only.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public MimeKit.MimeEntity this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MimeKit.MimeEntity Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index.</param>
        <summary>
            Gets or sets the <see cref="T:MimeKit.MimeEntity" /> at the specified index.
            </summary>
        <value>The attachment at the specified index.</value>
        <remarks>
            Gets or sets the <see cref="T:MimeKit.MimeEntity" /> at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (MimeKit.MimeEntity attachment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(class MimeKit.MimeEntity attachment) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachment" Type="MimeKit.MimeEntity" />
      </Parameters>
      <Docs>
        <param name="attachment">The attachment.</param>
        <summary>
            Removes the specified attachment.
            </summary>
        <returns>
          <value>true</value> if the attachment was removed; otherwise <value>false</value>.</returns>
        <remarks>
            Removes the specified attachment.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attachment" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index.</param>
        <summary>
            Removes the attachment at the specified index.
            </summary>
        <remarks>
            Removes the attachment at the specified index.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets an enumerator for the list of attachments.
            </summary>
        <returns>The enumerator.</returns>
        <remarks>
            Gets an enumerator for the list of attachments.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
