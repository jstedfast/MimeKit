<Type Name="CryptographyContext" FullName="MimeKit.Cryptography.CryptographyContext">
  <TypeSignature Language="C#" Value="public abstract class CryptographyContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CryptographyContext extends System.Object implements class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>0.32.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            An abstract cryptography context.
            </summary>
    <remarks>
            Generally speaking, applications should not use a <see cref="T:MimeKit.Cryptography.CryptographyContext" />
            directly, but rather via higher level APIs such as <see cref="T:MimeKit.Cryptography.MultipartSigned" />,
            <see cref="T:MimeKit.Cryptography.MultipartEncrypted" /> and <see cref="T:MimeKit.Cryptography.ApplicationPkcs7Mime" />.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CryptographyContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Cryptography.CryptographyContext" /> class.
            </summary>
        <remarks>
            Creates a new <see cref="T:MimeKit.Cryptography.CryptographyContext" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MimeKit.Cryptography.CryptographyContext Create (string protocol);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MimeKit.Cryptography.CryptographyContext Create(string protocol) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Cryptography.CryptographyContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocol" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="protocol">The protocol.</param>
        <summary>
            Creates a new <see cref="T:MimeKit.Cryptography.CryptographyContext" /> for the specified protocol.
            </summary>
        <returns>The <see cref="T:MimeKit.Cryptography.CryptographyContext" /> for the protocol.</returns>
        <remarks>
          <para>Creates a new <see cref="T:MimeKit.Cryptography.CryptographyContext" /> for the specified protocol.</para>
          <para>The default <see cref="T:MimeKit.Cryptography.CryptographyContext" /> types can over overridden by calling
            the <see cref="M:MimeKit.Cryptography.CryptographyContext.Register(System.Type)" /> method with the preferred type.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="protocol" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.NotSupportedException">
            There are no supported <see cref="T:MimeKit.Cryptography.CryptographyContext" />s that support
            the specified <paramref name="protocol" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Decrypt">
      <MemberSignature Language="C#" Value="public abstract MimeKit.MimeEntity Decrypt (System.IO.Stream encryptedData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MimeKit.MimeEntity Decrypt(class System.IO.Stream encryptedData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimeEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedData" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="encryptedData">The encrypted data.</param>
        <summary>
            Decrypts the specified encryptedData.
            </summary>
        <returns>The decrypted <see cref="T:MimeKit.MimeEntity" />.</returns>
        <remarks>
            Decrypts the specified encryptedData.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="encryptedData" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Releases all resources used by the <see cref="T:MimeKit.Cryptography.CryptographyContext" /> object.
            </summary>
        <remarks>Call <see cref="M:MimeKit.Cryptography.CryptographyContext.Dispose" /> when you are finished using the <see cref="T:MimeKit.Cryptography.CryptographyContext" />. The
            <see cref="M:MimeKit.Cryptography.CryptographyContext.Dispose" /> method leaves the <see cref="T:MimeKit.Cryptography.CryptographyContext" /> in an unusable state. After
            calling <see cref="M:MimeKit.Cryptography.CryptographyContext.Dispose" />, you must release all references to the <see cref="T:MimeKit.Cryptography.CryptographyContext" /> so
            the garbage collector can reclaim the memory that the <see cref="T:MimeKit.Cryptography.CryptographyContext" /> was occupying.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        <summary>
            Releases the unmanaged resources used by the <see cref="T:MimeKit.Cryptography.CryptographyContext" /> and
            optionally releases the managed resources.
            </summary>
        <remarks>
            Releases the unmanaged resources used by the <see cref="T:MimeKit.Cryptography.CryptographyContext" /> and
            optionally releases the managed resources.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public abstract MimeKit.MimePart Encrypt (System.Collections.Generic.IEnumerable&lt;MimeKit.MailboxAddress&gt; recipients, System.IO.Stream content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MimeKit.MimePart Encrypt(class System.Collections.Generic.IEnumerable`1&lt;class MimeKit.MailboxAddress&gt; recipients, class System.IO.Stream content) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipients" Type="System.Collections.Generic.IEnumerable&lt;MimeKit.MailboxAddress&gt;" />
        <Parameter Name="content" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="recipients">The recipients.</param>
        <param name="content">The content.</param>
        <summary>
            Encrypts the specified content for the specified recipients.
            </summary>
        <returns>A new <see cref="T:MimeKit.MimePart" /> instance
            containing the encrypted data.</returns>
        <remarks>
            Encrypts the specified content for the specified recipients.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="recipients" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="content" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:MimeKit.Cryptography.CertificateNotFoundException">
            A certificate could not be found for one or more of the <paramref name="recipients" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="EncryptionProtocol">
      <MemberSignature Language="C#" Value="public abstract string EncryptionProtocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EncryptionProtocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the encryption protocol.
            </summary>
        <value>The encryption protocol.</value>
        <remarks>
          <para>The encryption protocol is used by <see cref="T:MimeKit.Cryptography.MultipartEncrypted" />
            in order to determine what the protocol parameter of the Content-Type
            header should be.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public abstract MimeKit.MimePart Export (System.Collections.Generic.IEnumerable&lt;MimeKit.MailboxAddress&gt; mailboxes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MimeKit.MimePart Export(class System.Collections.Generic.IEnumerable`1&lt;class MimeKit.MailboxAddress&gt; mailboxes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailboxes" Type="System.Collections.Generic.IEnumerable&lt;MimeKit.MailboxAddress&gt;" />
      </Parameters>
      <Docs>
        <param name="mailboxes">The mailboxes.</param>
        <summary>
            Exports the keys for the specified mailboxes.
            </summary>
        <returns>A new <see cref="T:MimeKit.MimePart" /> instance containing the exported keys.</returns>
        <remarks>
            Exports the keys for the specified mailboxes.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="mailboxes" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="mailboxes" /> was empty.
            </exception>
        <exception cref="T:System.NotSupportedException">
            Exporting keys is not supported by this cryptography context.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDigestAlgorithm">
      <MemberSignature Language="C#" Value="public abstract MimeKit.Cryptography.DigestAlgorithm GetDigestAlgorithm (string micalg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MimeKit.Cryptography.DigestAlgorithm GetDigestAlgorithm(string micalg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Cryptography.DigestAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="micalg" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="micalg">The micalg parameter value.</param>
        <summary>
            Gets the digest algorithm from the micalg parameter value in a multipart/signed part.
            </summary>
        <returns>The digest algorithm.</returns>
        <remarks>
            Maps the micalg parameter value string back to the appropriate <see cref="T:MimeKit.Cryptography.DigestAlgorithm" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="micalg" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDigestAlgorithmName">
      <MemberSignature Language="C#" Value="public abstract string GetDigestAlgorithmName (MimeKit.Cryptography.DigestAlgorithm micalg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetDigestAlgorithmName(valuetype MimeKit.Cryptography.DigestAlgorithm micalg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="micalg" Type="MimeKit.Cryptography.DigestAlgorithm" />
      </Parameters>
      <Docs>
        <param name="micalg">The digest algorithm.</param>
        <summary>
            Gets the string name of the digest algorithm for use with the micalg parameter of a multipart/signed part.
            </summary>
        <returns>The micalg value.</returns>
        <remarks>
            Maps the <see cref="T:MimeKit.Cryptography.DigestAlgorithm" /> to the appropriate string identifier
            as used by the micalg parameter value of a multipart/signed Content-Type
            header.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="micalg" /> is out of range.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public abstract void Import (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Import(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">The raw certificate or key data.</param>
        <summary>
            Imports the public certificates or keys from the specified stream.
            </summary>
        <remarks>
            Imports the public certificates or keys from the specified stream.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.NotSupportedException">
            Importing keys is not supported by this cryptography context.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="KeyExchangeProtocol">
      <MemberSignature Language="C#" Value="public abstract string KeyExchangeProtocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string KeyExchangeProtocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the key exchange protocol.
            </summary>
        <value>The key exchange protocol.</value>
        <remarks>
          <para>The key exchange protocol is really only used for PGP.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static void Register (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Register(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">A custom subclass of <see cref="T:MimeKit.Cryptography.SecureMimeContext" /> or
            <see cref="T:MimeKit.Cryptography.OpenPgpContext" />.</param>
        <summary>
            Registers a default <see cref="T:MimeKit.Cryptography.SecureMimeContext" /> or <see cref="T:MimeKit.Cryptography.OpenPgpContext" />.
            </summary>
        <remarks>
            Registers the specified type as the default <see cref="T:MimeKit.Cryptography.SecureMimeContext" /> or
            <see cref="T:MimeKit.Cryptography.OpenPgpContext" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> is <c>null</c>.
            </exception>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="type" /> is not a subclass of
            <see cref="T:MimeKit.Cryptography.SecureMimeContext" /> or <see cref="T:MimeKit.Cryptography.OpenPgpContext" />.</para>
          <para>-or-</para>
          <para>
            <paramref name="type" /> does not have a parameterless constructor.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public abstract MimeKit.MimePart Sign (MimeKit.MailboxAddress signer, MimeKit.Cryptography.DigestAlgorithm digestAlgo, System.IO.Stream content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MimeKit.MimePart Sign(class MimeKit.MailboxAddress signer, valuetype MimeKit.Cryptography.DigestAlgorithm digestAlgo, class System.IO.Stream content) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.MimePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signer" Type="MimeKit.MailboxAddress" />
        <Parameter Name="digestAlgo" Type="MimeKit.Cryptography.DigestAlgorithm" />
        <Parameter Name="content" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="signer">The signer.</param>
        <param name="digestAlgo">The digest algorithm to use for signing.</param>
        <param name="content">The content.</param>
        <summary>
            Cryptographically signs the content.
            </summary>
        <returns>A new <see cref="T:MimeKit.MimePart" /> instance
            containing the detached signature data.</returns>
        <remarks>
            Cryptographically signs the content using the specified signer and digest algorithm.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="signer" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="content" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="digestAlgo" /> is out of range.
            </exception>
        <exception cref="T:System.NotSupportedException">
            The specified <see cref="T:MimeKit.Cryptography.DigestAlgorithm" /> is not supported by this context.
            </exception>
        <exception cref="T:MimeKit.Cryptography.CertificateNotFoundException">
            A signing certificate could not be found for <paramref name="signer" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SignatureProtocol">
      <MemberSignature Language="C#" Value="public abstract string SignatureProtocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignatureProtocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the signature protocol.
            </summary>
        <value>The signature protocol.</value>
        <remarks>
          <para>The signature protocol is used by <see cref="T:MimeKit.Cryptography.MultipartSigned" />
            in order to determine what the protocol parameter of the Content-Type
            header should be.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Supports">
      <MemberSignature Language="C#" Value="public abstract bool Supports (string protocol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(string protocol) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocol" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="protocol">The protocol.</param>
        <summary>
            Checks whether or not the specified protocol is supported by the <see cref="T:MimeKit.Cryptography.CryptographyContext" />.
            </summary>
        <returns>
          <c>true</c> if the protocol is supported; otherwise <c>false</c></returns>
        <remarks>
            Used in order to make sure that the protocol parameter value specified in either a multipart/signed
            or multipart/encrypted part is supported by the supplied cryptography context.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="protocol" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Verify">
      <MemberSignature Language="C#" Value="public abstract MimeKit.Cryptography.DigitalSignatureCollection Verify (System.IO.Stream content, System.IO.Stream signatureData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MimeKit.Cryptography.DigitalSignatureCollection Verify(class System.IO.Stream content, class System.IO.Stream signatureData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Cryptography.DigitalSignatureCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.IO.Stream" />
        <Parameter Name="signatureData" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="content">The content.</param>
        <param name="signatureData">The signature data.</param>
        <summary>
            Verifies the specified content using the detached signatureData.
            </summary>
        <returns>A list of digital signatures.</returns>
        <remarks>
            Verifies the specified content using the detached signatureData.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="content" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="signatureData" /> is <c>null</c>.</para>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>
