<Type Name="TemporarySecureMimeContext" FullName="MimeKit.Cryptography.TemporarySecureMimeContext">
  <TypeSignature Language="C#" Value="public class TemporarySecureMimeContext : MimeKit.Cryptography.SecureMimeContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TemporarySecureMimeContext extends MimeKit.Cryptography.SecureMimeContext" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>0.32.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MimeKit.Cryptography.SecureMimeContext</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            An S/MIME context that does not persist certificates, private keys or CRLs.
            </summary>
    <remarks>
            A <see cref="T:MimeKit.Cryptography.TemporarySecureMimeContext" /> is a special S/MIME context that
            does not use a persistent store for certificates, private keys, or CRLs.
            Instead, certificates, private keys, and CRLs are maintained in memory only.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TemporarySecureMimeContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Cryptography.TemporarySecureMimeContext" /> class.
            </summary>
        <remarks>
            Creates a new <see cref="T:MimeKit.Cryptography.TemporarySecureMimeContext" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificate">
      <MemberSignature Language="C#" Value="protected override Org.BouncyCastle.X509.X509Certificate GetCertificate (Org.BouncyCastle.X509.Store.IX509Selector selector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Org.BouncyCastle.X509.X509Certificate GetCertificate(class Org.BouncyCastle.X509.Store.IX509Selector selector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Org.BouncyCastle.X509.X509Certificate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="Org.BouncyCastle.X509.Store.IX509Selector" />
      </Parameters>
      <Docs>
        <param name="selector">The search criteria for the certificate.</param>
        <summary>
            Gets the X.509 certificate matching the specified selector.
            </summary>
        <returns>The certificate on success; otherwise <c>null</c>.</returns>
        <remarks>
            Gets the first certificate that matches the specified selector.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificateRevocationLists">
      <MemberSignature Language="C#" Value="protected override Org.BouncyCastle.X509.Store.IX509Store GetCertificateRevocationLists ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Org.BouncyCastle.X509.Store.IX509Store GetCertificateRevocationLists() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Org.BouncyCastle.X509.Store.IX509Store</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the certificate revocation lists.
            </summary>
        <returns>The certificate revocation lists.</returns>
        <remarks>
            A Certificate Revocation List (CRL) is a list of certificate serial numbers issued
            by a particular Certificate Authority (CA) that have been revoked, either by the CA
            itself or by the owner of the revoked certificate.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCmsRecipient">
      <MemberSignature Language="C#" Value="protected override MimeKit.Cryptography.CmsRecipient GetCmsRecipient (MimeKit.MailboxAddress mailbox);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class MimeKit.Cryptography.CmsRecipient GetCmsRecipient(class MimeKit.MailboxAddress mailbox) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Cryptography.CmsRecipient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailbox" Type="MimeKit.MailboxAddress" />
      </Parameters>
      <Docs>
        <param name="mailbox">The mailbox.</param>
        <summary>
            Gets the <see cref="T:MimeKit.Cryptography.CmsRecipient" /> for the specified mailbox.
            </summary>
        <returns>A <see cref="T:MimeKit.Cryptography.CmsRecipient" />.</returns>
        <remarks>
          <para>Constructs a <see cref="T:MimeKit.Cryptography.CmsRecipient" /> with the appropriate certificate and
            <see cref="P:MimeKit.Cryptography.CmsRecipient.EncryptionAlgorithms" /> for the specified mailbox.</para>
          <para>If the mailbox is a <see cref="T:MimeKit.Cryptography.SecureMailboxAddress" />, the
            <see cref="P:MimeKit.Cryptography.SecureMailboxAddress.Fingerprint" /> property will be used instead of
            the mailbox address.</para>
        </remarks>
        <exception cref="T:MimeKit.Cryptography.CertificateNotFoundException">
            A certificate for the specified <paramref name="mailbox" /> could not be found.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCmsSigner">
      <MemberSignature Language="C#" Value="protected override MimeKit.Cryptography.CmsSigner GetCmsSigner (MimeKit.MailboxAddress mailbox, MimeKit.Cryptography.DigestAlgorithm digestAlgo);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class MimeKit.Cryptography.CmsSigner GetCmsSigner(class MimeKit.MailboxAddress mailbox, valuetype MimeKit.Cryptography.DigestAlgorithm digestAlgo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Cryptography.CmsSigner</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailbox" Type="MimeKit.MailboxAddress" />
        <Parameter Name="digestAlgo" Type="MimeKit.Cryptography.DigestAlgorithm" />
      </Parameters>
      <Docs>
        <param name="mailbox">The mailbox.</param>
        <param name="digestAlgo">The preferred digest algorithm.</param>
        <summary>
            Gets the <see cref="T:MimeKit.Cryptography.CmsSigner" /> for the specified mailbox.
            </summary>
        <returns>A <see cref="T:MimeKit.Cryptography.CmsSigner" />.</returns>
        <remarks>
          <para>Constructs a <see cref="T:MimeKit.Cryptography.CmsSigner" /> with the appropriate signing certificate
            for the specified mailbox.</para>
          <para>If the mailbox is a <see cref="T:MimeKit.Cryptography.SecureMailboxAddress" />, the
            <see cref="P:MimeKit.Cryptography.SecureMailboxAddress.Fingerprint" /> property will be used instead of
            the mailbox address for database lookups.</para>
        </remarks>
        <exception cref="T:MimeKit.Cryptography.CertificateNotFoundException">
            A certificate for the specified <paramref name="mailbox" /> could not be found.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetIntermediateCertificates">
      <MemberSignature Language="C#" Value="protected override Org.BouncyCastle.X509.Store.IX509Store GetIntermediateCertificates ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Org.BouncyCastle.X509.Store.IX509Store GetIntermediateCertificates() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Org.BouncyCastle.X509.Store.IX509Store</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the intermediate certificates.
            </summary>
        <returns>The intermediate certificates.</returns>
        <remarks>
            An intermediate certificate is any certificate that exists between the root
            certificate issued by a Certificate Authority (CA) and the certificate at
            the end of the chain.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrivateKey">
      <MemberSignature Language="C#" Value="protected override Org.BouncyCastle.Crypto.AsymmetricKeyParameter GetPrivateKey (Org.BouncyCastle.X509.Store.IX509Selector selector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Org.BouncyCastle.Crypto.AsymmetricKeyParameter GetPrivateKey(class Org.BouncyCastle.X509.Store.IX509Selector selector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Org.BouncyCastle.Crypto.AsymmetricKeyParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="Org.BouncyCastle.X509.Store.IX509Selector" />
      </Parameters>
      <Docs>
        <param name="selector">The search criteria for the private key.</param>
        <summary>
            Gets the private key for the certificate matching the specified selector.
            </summary>
        <returns>The private key on success; otherwise <c>null</c>.</returns>
        <remarks>
            Gets the private key for the first certificate that matches the specified selector.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTrustedAnchors">
      <MemberSignature Language="C#" Value="protected override Org.BouncyCastle.Utilities.Collections.HashSet GetTrustedAnchors ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Org.BouncyCastle.Utilities.Collections.HashSet GetTrustedAnchors() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Org.BouncyCastle.Utilities.Collections.HashSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the trusted anchors.
            </summary>
        <returns>The trusted anchors.</returns>
        <remarks>
            A trusted anchor is a trusted root-level X.509 certificate,
            generally issued by a certificate authority (CA).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (Org.BouncyCastle.X509.X509Certificate certificate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(class Org.BouncyCastle.X509.X509Certificate certificate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificate" Type="Org.BouncyCastle.X509.X509Certificate" />
      </Parameters>
      <Docs>
        <param name="certificate">The certificate.</param>
        <summary>
            Imports the specified certificate.
            </summary>
        <remarks>
            Imports the specified certificate.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="certificate" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (Org.BouncyCastle.X509.X509Crl crl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(class Org.BouncyCastle.X509.X509Crl crl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="crl" Type="Org.BouncyCastle.X509.X509Crl" />
      </Parameters>
      <Docs>
        <param name="crl">The certificate revocation list.</param>
        <summary>
            Imports the specified certificate revocation list.
            </summary>
        <remarks>
            Imports the specified certificate revocation list.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="crl" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (System.IO.Stream stream, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(class System.IO.Stream stream, string password) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">The raw certificate and key data.</param>
        <param name="password">The password to unlock the stream.</param>
        <summary>
            Imports certificates and keys from a pkcs12-encoded stream.
            </summary>
        <remarks>
            Imports certificates and keys from a pkcs12-encoded stream.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="stream" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="password" /> is <c>null</c>.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSecureMimeCapabilities">
      <MemberSignature Language="C#" Value="protected override void UpdateSecureMimeCapabilities (Org.BouncyCastle.X509.X509Certificate certificate, MimeKit.Cryptography.EncryptionAlgorithm[] algorithms, DateTime timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void UpdateSecureMimeCapabilities(class Org.BouncyCastle.X509.X509Certificate certificate, valuetype MimeKit.Cryptography.EncryptionAlgorithm[] algorithms, valuetype System.DateTime timestamp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificate" Type="Org.BouncyCastle.X509.X509Certificate" />
        <Parameter Name="algorithms" Type="MimeKit.Cryptography.EncryptionAlgorithm[]" />
        <Parameter Name="timestamp" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="certificate">The certificate.</param>
        <param name="algorithms">The encryption algorithm capabilities of the client (in preferred order).</param>
        <param name="timestamp">The timestamp.</param>
        <summary>
            Updates the known S/MIME capabilities of the client used by the recipient that owns the specified certificate.
            </summary>
        <remarks>
            Updates the known S/MIME capabilities of the client used by the recipient that owns the specified certificate.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
