<Type Name="SqliteCertificateDatabase" FullName="MimeKit.Cryptography.SqliteCertificateDatabase">
  <TypeSignature Language="C#" Value="public class SqliteCertificateDatabase : MimeKit.Cryptography.SqlCertificateDatabase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SqliteCertificateDatabase extends MimeKit.Cryptography.SqlCertificateDatabase" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MimeKit.Cryptography.SqlCertificateDatabase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            An X.509 certificate database built on SQLite.
            </summary>
    <remarks>
      <para>An X.509 certificate database is used for storing certificates, metdata related to the certificates
            (such as encryption algorithms supported by the associated client), certificate revocation lists (CRLs),
            and private keys.</para>
      <para>This particular database uses SQLite to store the data.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqliteCertificateDatabase (System.Data.IDbConnection connection, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.IDbConnection connection, string password) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.IDbConnection" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">The SQLite connection.</param>
        <param name="password">The password used for encrypting and decrypting the private keys.</param>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Cryptography.SqliteCertificateDatabase" /> class.
            </summary>
        <remarks>
            Creates a new <see cref="T:MimeKit.Cryptography.SqliteCertificateDatabase" /> using the provided SQLite database connection.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="connection" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="password" /> is <c>null</c>.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqliteCertificateDatabase (string fileName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string password) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">The file name.</param>
        <param name="password">The password used for encrypting and decrypting the private keys.</param>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Cryptography.SqliteCertificateDatabase" /> class.
            </summary>
        <remarks>
          <para>Creates a new <see cref="T:MimeKit.Cryptography.SqliteCertificateDatabase" /> and opens a connection to the
            SQLite database at the specified path using the Mono.Data.Sqlite binding to the native
            SQLite library.</para>
          <para>If Mono.Data.Sqlite is not available or if an alternative binding to the native
            SQLite library is preferred, then consider using
            <see cref="M:MimeKit.Cryptography.SqliteCertificateDatabase.#ctor(System.Data.IDbConnection,System.String)" /> instead.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="fileName" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="password" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
            The specified file path is empty.
            </exception>
        <exception cref="T:System.UnauthorizedAccessException">
            The user does not have access to read the specified file.
            </exception>
        <exception cref="T:System.IO.IOException">
            An error occurred reading the file.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCreateCertificatesTableCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.IDbCommand GetCreateCertificatesTableCommand (System.Data.IDbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.IDbCommand GetCreateCertificatesTableCommand(class System.Data.IDbConnection connection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.IDbConnection" />
      </Parameters>
      <Docs>
        <param name="connection">The <see cref="T:System.Data.IDbConnection" />.</param>
        <summary>
            Gets the command to create the certificates table.
            </summary>
        <returns>The <see cref="T:System.Data.IDbCommand" />.</returns>
        <remarks>
            Constructs the command to create a certificates table suitable for storing
            <see cref="T:MimeKit.Cryptography.X509CertificateRecord" /> objects.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCreateCrlsTableCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.IDbCommand GetCreateCrlsTableCommand (System.Data.IDbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.IDbCommand GetCreateCrlsTableCommand(class System.Data.IDbConnection connection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.IDbConnection" />
      </Parameters>
      <Docs>
        <param name="connection">The <see cref="T:System.Data.IDbConnection" />.</param>
        <summary>
            Gets the command to create the CRLs table.
            </summary>
        <returns>The <see cref="T:System.Data.IDbCommand" />.</returns>
        <remarks>
            Constructs the command to create a CRLs table suitable for storing
            <see cref="T:MimeKit.Cryptography.X509CertificateRecord" /> objects.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
