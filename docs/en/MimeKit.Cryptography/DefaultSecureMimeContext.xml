<Type Name="DefaultSecureMimeContext" FullName="MimeKit.Cryptography.DefaultSecureMimeContext">
  <TypeSignature Language="C#" Value="public class DefaultSecureMimeContext : MimeKit.Cryptography.SecureMimeContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi DefaultSecureMimeContext extends MimeKit.Cryptography.SecureMimeContext" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>0.32.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MimeKit.Cryptography.SecureMimeContext</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A default <see cref="T:MimeKit.Cryptography.SecureMimeContext" /> implementation that uses
            an SQLite database as a certificate and private key store.
            </summary>
    <remarks>
            The default S/MIME context is designed to be usable on any platform
            where there exists a .NET runtime by storing certificates, CRLs, and
            (encrypted) private keys in a SQLite database.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultSecureMimeContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Cryptography.DefaultSecureMimeContext" /> class.
            </summary>
        <remarks>
          <para>Not recommended for production use as the password to unlock the private keys is hard-coded.</para>
          <para>Requires linking with Mono.Data.Sqlite.</para>
        </remarks>
        <exception cref="T:System.IO.IOException">
            An error occurred reading the database at the default location.
            </exception>
        <exception cref="T:System.UnauthorizedAccessException">
            The user does not have access to read the database at the default location.
            </exception>
        <exception cref="T:System.NotImplementedException">
            Mono.Data.Sqlite is not available.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultSecureMimeContext (MimeKit.Cryptography.IX509CertificateDatabase database);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MimeKit.Cryptography.IX509CertificateDatabase database) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="database" Type="MimeKit.Cryptography.IX509CertificateDatabase" />
      </Parameters>
      <Docs>
        <param name="database">The certificate database.</param>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Cryptography.DefaultSecureMimeContext" /> class.
            </summary>
        <remarks>
            This constructor is useful for supplying a custom <see cref="T:MimeKit.Cryptography.IX509CertificateDatabase" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="database" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultSecureMimeContext (string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="password">The password used for encrypting and decrypting the private keys.</param>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Cryptography.DefaultSecureMimeContext" /> class.
            </summary>
        <remarks>
          <para>Allows the program to specify its own password for the default database.</para>
          <para>Requires linking with Mono.Data.Sqlite.</para>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
            The user does not have access to read the database at the default location.
            </exception>
        <exception cref="T:System.IO.IOException">
            An error occurred reading the database at the default location.
            </exception>
        <exception cref="T:System.NotImplementedException">
            Mono.Data.Sqlite is not available.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultSecureMimeContext (string fileName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string password) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">The path to the SQLite database.</param>
        <param name="password">The password used for encrypting and decrypting the private keys.</param>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Cryptography.DefaultSecureMimeContext" /> class.
            </summary>
        <remarks>
          <para>Allows the program to specify its own location for the SQLite database. If the file does not exist,
            it will be created and the necessary tables and indexes will be constructed.</para>
          <para>Requires linking with Mono.Data.Sqlite.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="fileName" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="password" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
            An error occurred reading the file.
            </exception>
        <exception cref="T:System.ArgumentException">
            The specified file path is empty.
            </exception>
        <exception cref="T:System.UnauthorizedAccessException">
            The user does not have access to read the specified file.
            </exception>
        <exception cref="T:System.NotImplementedException">
            Mono.Data.Sqlite is not available.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultDatabasePath">
      <MemberSignature Language="C#" Value="public static readonly string DefaultDatabasePath;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DefaultDatabasePath" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The default database path for certificates, private keys and CRLs.
            </summary>
        <remarks>
          <para>On Microsoft Windows-based systems, this path will be something like <c>C:\Users\UserName\AppData\Roaming\mimekit\smime.db</c>.</para>
          <para>On Unix systems such as Linux and Mac OS X, this path will be <c>~/.mimekit/smime.db</c>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        <summary>
            Releases the unmanaged resources used by the <see cref="T:MimeKit.Cryptography.DefaultSecureMimeContext" /> and
            optionally releases the managed resources.
            </summary>
        <remarks>
            Releases the unmanaged resources used by the <see cref="T:MimeKit.Cryptography.DefaultSecureMimeContext" /> and
            optionally releases the managed resources.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificate">
      <MemberSignature Language="C#" Value="protected override Org.BouncyCastle.X509.X509Certificate GetCertificate (Org.BouncyCastle.X509.Store.IX509Selector selector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Org.BouncyCastle.X509.X509Certificate GetCertificate(class Org.BouncyCastle.X509.Store.IX509Selector selector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Org.BouncyCastle.X509.X509Certificate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="Org.BouncyCastle.X509.Store.IX509Selector" />
      </Parameters>
      <Docs>
        <param name="selector">The search criteria for the certificate.</param>
        <summary>
            Gets the X.509 certificate matching the specified selector.
            </summary>
        <returns>The certificate on success; otherwise <c>null</c>.</returns>
        <remarks>
            Gets the first certificate that matches the specified selector.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificateRevocationLists">
      <MemberSignature Language="C#" Value="protected override Org.BouncyCastle.X509.Store.IX509Store GetCertificateRevocationLists ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Org.BouncyCastle.X509.Store.IX509Store GetCertificateRevocationLists() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Org.BouncyCastle.X509.Store.IX509Store</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the certificate revocation lists.
            </summary>
        <returns>The certificate revocation lists.</returns>
        <remarks>
            A Certificate Revocation List (CRL) is a list of certificate serial numbers issued
            by a particular Certificate Authority (CA) that have been revoked, either by the CA
            itself or by the owner of the revoked certificate.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCmsRecipient">
      <MemberSignature Language="C#" Value="protected override MimeKit.Cryptography.CmsRecipient GetCmsRecipient (MimeKit.MailboxAddress mailbox);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class MimeKit.Cryptography.CmsRecipient GetCmsRecipient(class MimeKit.MailboxAddress mailbox) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Cryptography.CmsRecipient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailbox" Type="MimeKit.MailboxAddress" />
      </Parameters>
      <Docs>
        <param name="mailbox">The mailbox.</param>
        <summary>
            Gets the <see cref="T:MimeKit.Cryptography.CmsRecipient" /> for the specified mailbox.
            </summary>
        <returns>A <see cref="T:MimeKit.Cryptography.CmsRecipient" />.</returns>
        <remarks>
          <para>Constructs a <see cref="T:MimeKit.Cryptography.CmsRecipient" /> with the appropriate certificate and
            <see cref="P:MimeKit.Cryptography.CmsRecipient.EncryptionAlgorithms" /> for the specified mailbox.</para>
          <para>If the mailbox is a <see cref="T:MimeKit.Cryptography.SecureMailboxAddress" />, the
            <see cref="P:MimeKit.Cryptography.SecureMailboxAddress.Fingerprint" /> property will be used instead of
            the mailbox address for database lookups.</para>
        </remarks>
        <exception cref="T:MimeKit.Cryptography.CertificateNotFoundException">
            A certificate for the specified <paramref name="mailbox" /> could not be found.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCmsSigner">
      <MemberSignature Language="C#" Value="protected override MimeKit.Cryptography.CmsSigner GetCmsSigner (MimeKit.MailboxAddress mailbox, MimeKit.Cryptography.DigestAlgorithm digestAlgo);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class MimeKit.Cryptography.CmsSigner GetCmsSigner(class MimeKit.MailboxAddress mailbox, valuetype MimeKit.Cryptography.DigestAlgorithm digestAlgo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Cryptography.CmsSigner</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mailbox" Type="MimeKit.MailboxAddress" />
        <Parameter Name="digestAlgo" Type="MimeKit.Cryptography.DigestAlgorithm" />
      </Parameters>
      <Docs>
        <param name="mailbox">The mailbox.</param>
        <param name="digestAlgo">The preferred digest algorithm.</param>
        <summary>
            Gets the <see cref="T:MimeKit.Cryptography.CmsSigner" /> for the specified mailbox.
            </summary>
        <returns>A <see cref="T:MimeKit.Cryptography.CmsSigner" />.</returns>
        <remarks>
          <para>Constructs a <see cref="T:MimeKit.Cryptography.CmsSigner" /> with the appropriate signing certificate
            for the specified mailbox.</para>
          <para>If the mailbox is a <see cref="T:MimeKit.Cryptography.SecureMailboxAddress" />, the
            <see cref="P:MimeKit.Cryptography.SecureMailboxAddress.Fingerprint" /> property will be used instead of
            the mailbox address for database lookups.</para>
        </remarks>
        <exception cref="T:MimeKit.Cryptography.CertificateNotFoundException">
            A certificate for the specified <paramref name="mailbox" /> could not be found.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetIntermediateCertificates">
      <MemberSignature Language="C#" Value="protected override Org.BouncyCastle.X509.Store.IX509Store GetIntermediateCertificates ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Org.BouncyCastle.X509.Store.IX509Store GetIntermediateCertificates() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Org.BouncyCastle.X509.Store.IX509Store</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the intermediate certificates.
            </summary>
        <returns>The intermediate certificates.</returns>
        <remarks>
            An intermediate certificate is any certificate that exists between the root
            certificate issued by a Certificate Authority (CA) and the certificate at
            the end of the chain.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrivateKey">
      <MemberSignature Language="C#" Value="protected override Org.BouncyCastle.Crypto.AsymmetricKeyParameter GetPrivateKey (Org.BouncyCastle.X509.Store.IX509Selector selector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Org.BouncyCastle.Crypto.AsymmetricKeyParameter GetPrivateKey(class Org.BouncyCastle.X509.Store.IX509Selector selector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Org.BouncyCastle.Crypto.AsymmetricKeyParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="Org.BouncyCastle.X509.Store.IX509Selector" />
      </Parameters>
      <Docs>
        <param name="selector">The search criteria for the private key.</param>
        <summary>
            Gets the private key for the certificate matching the specified selector.
            </summary>
        <returns>The private key on success; otherwise <c>null</c>.</returns>
        <remarks>
            Gets the private key for the first certificate that matches the specified selector.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTrustedAnchors">
      <MemberSignature Language="C#" Value="protected override Org.BouncyCastle.Utilities.Collections.HashSet GetTrustedAnchors ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Org.BouncyCastle.Utilities.Collections.HashSet GetTrustedAnchors() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Org.BouncyCastle.Utilities.Collections.HashSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the trusted anchors.
            </summary>
        <returns>The trusted anchors.</returns>
        <remarks>
            A trusted anchor is a trusted root-level X.509 certificate,
            generally issued by a Certificate Authority (CA).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (Org.BouncyCastle.X509.X509Certificate certificate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(class Org.BouncyCastle.X509.X509Certificate certificate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificate" Type="Org.BouncyCastle.X509.X509Certificate" />
      </Parameters>
      <Docs>
        <param name="certificate">The certificate.</param>
        <summary>
            Imports a certificate.
            </summary>
        <remarks>
            Imports the specified certificate into the database.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="certificate" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (Org.BouncyCastle.X509.X509Crl crl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(class Org.BouncyCastle.X509.X509Crl crl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="crl" Type="Org.BouncyCastle.X509.X509Crl" />
      </Parameters>
      <Docs>
        <param name="crl">The certificate revocation list.</param>
        <summary>
            Imports a certificate revocation list.
            </summary>
        <remarks>
            Imports the specified certificate revocation list.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="crl" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.IO.Stream stream, bool trusted);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.IO.Stream stream, bool trusted) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="trusted" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">The raw certificate(s).</param>
        <param name="trusted">
          <c>true</c> if the certificates are trusted.</param>
        <summary>
            Imports a DER-encoded certificate stream.
            </summary>
        <remarks>
            Imports all of the certificates in the DER-encoded stream.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (System.IO.Stream stream, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(class System.IO.Stream stream, string password) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">The raw certificate and key data.</param>
        <param name="password">The password to unlock the data.</param>
        <summary>
            Imports certificates and keys from a pkcs12-encoded stream.
            </summary>
        <remarks>
            Imports all of the certificates and keys from the pkcs12-encoded stream.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="stream" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="password" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.NotSupportedException">
            Importing keys is not supported by this cryptography context.
            </exception>
        <exception cref="T:Org.BouncyCastle.Cms.CmsException">
            An error occurred in the cryptographic message syntax subsystem.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSecureMimeCapabilities">
      <MemberSignature Language="C#" Value="protected override void UpdateSecureMimeCapabilities (Org.BouncyCastle.X509.X509Certificate certificate, MimeKit.Cryptography.EncryptionAlgorithm[] algorithms, DateTime timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void UpdateSecureMimeCapabilities(class Org.BouncyCastle.X509.X509Certificate certificate, valuetype MimeKit.Cryptography.EncryptionAlgorithm[] algorithms, valuetype System.DateTime timestamp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificate" Type="Org.BouncyCastle.X509.X509Certificate" />
        <Parameter Name="algorithms" Type="MimeKit.Cryptography.EncryptionAlgorithm[]" />
        <Parameter Name="timestamp" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="certificate">The certificate.</param>
        <param name="algorithms">The encryption algorithm capabilities of the client (in preferred order).</param>
        <param name="timestamp">The timestamp.</param>
        <summary>
            Updates the known S/MIME capabilities of the client used by the recipient that owns the specified certificate.
            </summary>
        <remarks>
            Updates the known S/MIME capabilities of the client used by the recipient that owns the specified certificate.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
