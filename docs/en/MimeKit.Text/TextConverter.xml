<Type Name="TextConverter" FullName="MimeKit.Text.TextConverter">
  <TypeSignature Language="C#" Value="public abstract class TextConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract TextConverter extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            An abstract class for converting text from one format to another.
            </summary>
    <remarks>
            An abstract class for converting text from one format to another.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Text.TextConverter" /> class.
            </summary>
        <remarks>
            Initializes a new instance of the <see cref="T:MimeKit.Text.TextConverter" /> class.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public virtual string Convert (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Convert(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text to convert.</param>
        <summary>
            Convert text from the <see cref="P:MimeKit.Text.TextConverter.InputFormat" /> to the <see cref="P:MimeKit.Text.TextConverter.OutputFormat" />.
            </summary>
        <returns>The converted text.</returns>
        <remarks>
            Converts text from the <see cref="P:MimeKit.Text.TextConverter.InputFormat" /> to the <see cref="P:MimeKit.Text.TextConverter.OutputFormat" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public virtual void Convert (System.IO.Stream source, System.IO.Stream destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Convert(class System.IO.Stream source, class System.IO.Stream destination) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="destination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="source">The source stream.</param>
        <param name="destination">The destination stream.</param>
        <summary>
            Convert the contents of <paramref name="source" /> from the <see cref="P:MimeKit.Text.TextConverter.InputFormat" /> to the
            <see cref="P:MimeKit.Text.TextConverter.OutputFormat" /> and writes the resulting text to <paramref name="destination" />.
            </summary>
        <remarks>
            Converts the contents of <paramref name="source" /> from the <see cref="P:MimeKit.Text.TextConverter.InputFormat" /> to the
            <see cref="P:MimeKit.Text.TextConverter.OutputFormat" /> and writes the resulting text to <paramref name="destination" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="source" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="destination" /> is <c>null</c>.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public virtual void Convert (System.IO.Stream source, System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Convert(class System.IO.Stream source, class System.IO.TextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="source">The source stream.</param>
        <param name="writer">The text writer.</param>
        <summary>
            Convert the contents of <paramref name="source" /> from the <see cref="P:MimeKit.Text.TextConverter.InputFormat" /> to the
            <see cref="P:MimeKit.Text.TextConverter.OutputFormat" /> and uses the <paramref name="writer" /> to write the resulting text.
            </summary>
        <remarks>
            Converts the contents of <paramref name="source" /> from the <see cref="P:MimeKit.Text.TextConverter.InputFormat" /> to the
            <see cref="P:MimeKit.Text.TextConverter.OutputFormat" /> and uses the <paramref name="writer" /> to write the resulting text.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="source" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="writer" /> is <c>null</c>.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public virtual void Convert (System.IO.TextReader reader, System.IO.Stream destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Convert(class System.IO.TextReader reader, class System.IO.Stream destination) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="destination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="reader">The text reader.</param>
        <param name="destination">The destination stream.</param>
        <summary>
            Convert the contents of <paramref name="reader" /> from the <see cref="P:MimeKit.Text.TextConverter.InputFormat" /> to the
            <see cref="P:MimeKit.Text.TextConverter.OutputFormat" /> and writes the resulting text to <paramref name="destination" />.
            </summary>
        <remarks>
            Converts the contents of <paramref name="reader" /> from the <see cref="P:MimeKit.Text.TextConverter.InputFormat" /> to the
            <see cref="P:MimeKit.Text.TextConverter.OutputFormat" /> and writes the resulting text to <paramref name="destination" />.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="reader" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="destination" /> is <c>null</c>.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public abstract void Convert (System.IO.TextReader reader, System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Convert(class System.IO.TextReader reader, class System.IO.TextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="reader">The text reader.</param>
        <param name="writer">The text writer.</param>
        <summary>
            Convert the contents of <paramref name="reader" /> from the <see cref="P:MimeKit.Text.TextConverter.InputFormat" /> to the
            <see cref="P:MimeKit.Text.TextConverter.OutputFormat" /> and uses the <paramref name="writer" /> to write the resulting text.
            </summary>
        <remarks>
            Converts the contents of <paramref name="reader" /> from the <see cref="P:MimeKit.Text.TextConverter.InputFormat" /> to the
            <see cref="P:MimeKit.Text.TextConverter.OutputFormat" /> and uses the <paramref name="writer" /> to write the resulting text.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="reader" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="writer" /> is <c>null</c>.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DetectEncodingFromByteOrderMark">
      <MemberSignature Language="C#" Value="public bool DetectEncodingFromByteOrderMark { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DetectEncodingFromByteOrderMark" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set whether the encoding of the input is detected from the byte order mark or
            determined by the <see cref="P:MimeKit.Text.TextConverter.InputEncoding" /> property.
            </summary>
        <value>
          <c>true</c> if detect encoding from byte order mark; otherwise, <c>false</c>.</value>
        <remarks>
            Gets or sets whether the encoding of the input is detected from the byte order mark or
            determined by the <see cref="P:MimeKit.Text.TextConverter.InputEncoding" /> property.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding InputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding InputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set the input encoding.
            </summary>
        <value>The input encoding.</value>
        <remarks>
            Gets or sets the input encoding.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="InputFormat">
      <MemberSignature Language="C#" Value="public abstract MimeKit.Text.TextFormat InputFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MimeKit.Text.TextFormat InputFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Text.TextFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the input format.
            </summary>
        <value>The input format.</value>
        <remarks>
            Gets the input format.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputStreamBufferSize">
      <MemberSignature Language="C#" Value="public int InputStreamBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InputStreamBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set the size of the input stream buffer.
            </summary>
        <value>The size of the input stream buffer.</value>
        <remarks>
            Gets or sets the size of the input stream buffer.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> is less than or equal to <c>0</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="OutputEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding OutputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding OutputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set the output encoding.
            </summary>
        <value>The output encoding.</value>
        <remarks>
            Gets or sets the output encoding.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <c>null</c>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="OutputFormat">
      <MemberSignature Language="C#" Value="public abstract MimeKit.Text.TextFormat OutputFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MimeKit.Text.TextFormat OutputFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Text.TextFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the output format.
            </summary>
        <value>The output format.</value>
        <remarks>
            Gets the output format.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputStreamBufferSize">
      <MemberSignature Language="C#" Value="public int OutputStreamBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 OutputStreamBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set the size of the output stream buffer.
            </summary>
        <value>The size of the output stream buffer.</value>
        <remarks>
            Gets or sets the size of the output stream buffer.
            </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> is less than or equal to <c>0</c>.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
