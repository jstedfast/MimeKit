<Type Name="TextToFlowed" FullName="MimeKit.Text.TextToFlowed">
  <TypeSignature Language="C#" Value="public class TextToFlowed : MimeKit.Text.TextConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextToFlowed extends MimeKit.Text.TextConverter" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MimeKit.Text.TextConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A text to flowed text converter.
            </summary>
    <remarks>
      <para>Wraps text to conform with the flowed text format described in rfc3676.</para>
      <para>The Content-Type header for the wrapped output text should be set to
            <c>text/plain; format=flowed; delsp=yes</c>.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextToFlowed ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Text.TextToFlowed" /> class.
            </summary>
        <remarks>
            Creates a new text to flowed text converter.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public override void Convert (System.IO.TextReader reader, System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Convert(class System.IO.TextReader reader, class System.IO.TextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="reader">The text reader.</param>
        <param name="writer">The text writer.</param>
        <summary>
            Convert the contents of <paramref name="reader" /> from the <see cref="P:MimeKit.Text.TextToFlowed.InputFormat" /> to the
            <see cref="P:MimeKit.Text.TextToFlowed.OutputFormat" /> and uses the <paramref name="writer" /> to write the resulting text.
            </summary>
        <remarks>
            Converts the contents of <paramref name="reader" /> from the <see cref="P:MimeKit.Text.TextToFlowed.InputFormat" /> to the
            <see cref="P:MimeKit.Text.TextToFlowed.OutputFormat" /> and uses the <paramref name="writer" /> to write the resulting text.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="reader" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="writer" /> is <c>null</c>.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Footer">
      <MemberSignature Language="C#" Value="public string Footer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Footer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set the text that will be appended to the end of the output.
            </summary>
        <value>The footer.</value>
        <remarks>
          <para>Gets or sets the text that will be appended to the end of the output.</para>
          <para>The footer must be set before conversion begins.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Header">
      <MemberSignature Language="C#" Value="public string Header { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Header" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get or set text that will be prepended to the beginning of the output.
            </summary>
        <value>The header.</value>
        <remarks>
          <para>Gets or sets the text that will be prepended to the beginning of the output.</para>
          <para>The header must be set before conversion begins.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputFormat">
      <MemberSignature Language="C#" Value="public override MimeKit.Text.TextFormat InputFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MimeKit.Text.TextFormat InputFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Text.TextFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the input format.
            </summary>
        <value>The input format.</value>
        <remarks>
            Gets the input format.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputFormat">
      <MemberSignature Language="C#" Value="public override MimeKit.Text.TextFormat OutputFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MimeKit.Text.TextFormat OutputFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Text.TextFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the output format.
            </summary>
        <value>The output format.</value>
        <remarks>
            Gets the output format.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
