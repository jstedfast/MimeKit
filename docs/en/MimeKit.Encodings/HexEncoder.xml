<Type Name="HexEncoder" FullName="MimeKit.Encodings.HexEncoder">
  <TypeSignature Language="C#" Value="public class HexEncoder : MimeKit.Encodings.IMimeEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HexEncoder extends System.Object implements class MimeKit.Encodings.IMimeEncoder" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>0.32.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MimeKit.Encodings.IMimeEncoder</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Incrementally encodes content using a Uri hex encoding.
            </summary>
    <remarks>
            This is mostly meant for decoding parameter values encoded using
            the rules specified by rfc2184 and rfc2231.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HexEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:MimeKit.Encodings.HexEncoder" /> class.
            </summary>
        <remarks>
            Creates a new hex encoder.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public MimeKit.Encodings.IMimeEncoder Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MimeKit.Encodings.IMimeEncoder Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Encodings.IMimeEncoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clone the <see cref="T:MimeKit.Encodings.HexEncoder" /> with its current state.
            </summary>
        <returns>A new <see cref="T:MimeKit.Encodings.HexEncoder" /> with identical state.</returns>
        <remarks>
            Creates a new <see cref="T:MimeKit.Encodings.HexEncoder" /> with exactly the same state as the current encoder.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public int Encode (byte[] input, int startIndex, int length, byte[] output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Encode(unsigned int8[] input, int32 startIndex, int32 length, unsigned int8[] output) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="output" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="input">The input buffer.</param>
        <param name="startIndex">The starting index of the input buffer.</param>
        <param name="length">The length of the input buffer.</param>
        <param name="output">The output buffer.</param>
        <summary>
            Encodes the specified input into the output buffer.
            </summary>
        <returns>The number of bytes written to the output buffer.</returns>
        <remarks>
          <para>Encodes the specified input into the output buffer.</para>
          <para>The output buffer should be large enough to hold all of the
            encoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.HexEncoder.EstimateOutputLength(System.Int32)" />.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="input" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="output" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> and <paramref name="length" /> do not specify
            a valid range in the <paramref name="input" /> byte array.
            </exception>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="output" /> is not large enough to contain the encoded content.</para>
          <para>Use the <see cref="M:MimeKit.Encodings.HexEncoder.EstimateOutputLength(System.Int32)" /> method to properly determine the
            necessary length of the <paramref name="output" /> byte array.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public MimeKit.ContentEncoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MimeKit.ContentEncoding Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.ContentEncoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the encoding.
            </summary>
        <value>The encoding.</value>
        <remarks>
            Gets the encoding that the encoder supports.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EstimateOutputLength">
      <MemberSignature Language="C#" Value="public int EstimateOutputLength (int inputLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 EstimateOutputLength(int32 inputLength) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inputLength">The input length.</param>
        <summary>
            Estimates the length of the output.
            </summary>
        <returns>The estimated output length.</returns>
        <remarks>
            Estimates the number of bytes needed to encode the specified number of input bytes.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public int Flush (byte[] input, int startIndex, int length, byte[] output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Flush(unsigned int8[] input, int32 startIndex, int32 length, unsigned int8[] output) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="output" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="input">The input buffer.</param>
        <param name="startIndex">The starting index of the input buffer.</param>
        <param name="length">The length of the input buffer.</param>
        <param name="output">The output buffer.</param>
        <summary>
            Encodes the specified input into the output buffer, flushing any internal buffer state as well.
            </summary>
        <returns>The number of bytes written to the output buffer.</returns>
        <remarks>
          <para>Encodes the specified input into the output buffer, flusing any internal state as well.</para>
          <para>The output buffer should be large enough to hold all of the
            encoded input. For estimating the size needed for the output buffer,
            see <see cref="M:MimeKit.Encodings.HexEncoder.EstimateOutputLength(System.Int32)" />.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="input" /> is <c>null</c>.</para>
          <para>-or-</para>
          <para>
            <paramref name="output" /> is <c>null</c>.</para>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> and <paramref name="length" /> do not specify
            a valid range in the <paramref name="input" /> byte array.
            </exception>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="output" /> is not large enough to contain the encoded content.</para>
          <para>Use the <see cref="M:MimeKit.Encodings.HexEncoder.EstimateOutputLength(System.Int32)" /> method to properly determine the
            necessary length of the <paramref name="output" /> byte array.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.32.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Resets the encoder.
            </summary>
        <remarks>
            Resets the state of the encoder.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
