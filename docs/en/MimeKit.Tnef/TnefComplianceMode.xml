<Type Name="TnefComplianceMode" FullName="MimeKit.Tnef.TnefComplianceMode">
  <TypeSignature Language="C#" Value="public enum TnefComplianceMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed TnefComplianceMode extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>MimeKit</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
            A TNEF compliance mode.
            </summary>
    <remarks>
            A TNEF compliance mode.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="Loose">
      <MemberSignature Language="C#" Value="Loose" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype MimeKit.Tnef.TnefComplianceMode Loose = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Tnef.TnefComplianceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Use a loose compliance mode, attempting to ignore invalid or corrupt data.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="Strict">
      <MemberSignature Language="C#" Value="Strict" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype MimeKit.Tnef.TnefComplianceMode Strict = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MimeKit.Tnef.TnefComplianceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Use a very strict compliance mode, aborting the parser at the first sign of
            invalid or corrupted data.
            </summary>
      </Docs>
    </Member>
  </Members>
</Type>
